<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zebble.iOS</name>
    </assembly>
    <members>
        <member name="M:Zebble.Device.Contacts.GetAll(Zebble.OnError)">
            <summary>
            Returns all the contacts in the device operating system.
            </summary>
        </member>
        <member name="M:Zebble.Device.Contacts.Search(System.String,Zebble.OnError)">
            <summary>
            Returns the contacts in the device operating system which match the specified search query.        
            </summary>
            <param name="nameKeywords">If null or empty, all contacts will be returned.</param>
        </member>
        <member name="M:Zebble.Device.Network.Download(System.Uri,System.String,Zebble.OnError,System.Int32)">
            <summary>
            Downloads a file from a url to a specific path on device
            </summary>
            <param name="url">file url that image will be downloaded from</param>
            <param name="path">Destination path that image will be saved</param>
            <returns>true if download is completed and the file is saved on device successfully</returns>
        </member>
        <member name="M:Zebble.Device.Network.Download(System.Uri,System.Int32,System.Int32)">
            <summary>
            Downloads the data from a specified URL.
            </summary>
            <param name="timeoutPerAttempt">The number of seconds to wait for each attempt.</param>
        </member>
        <member name="M:Zebble.Device.Network.IsHostReachable(System.String,System.Int32)">
            <summary>
            Tests if a host name is accessible (i.e. there is internet connection available on the device, and the address itself is valid and responding to network requests.
            </summary>
            <param name="destination">The host name can machine name, domain name, IP address, etc.</param>
        </member>
        <member name="M:Zebble.Device.Messaging.SendEmail(System.String,System.String,System.String,Zebble.OnError)">
            <summary>Send an email using the default email application on the device.</summary>
             /// <param name="to">Email recipient</param>
            <param name="subject">Email subject</param>
            <param name="message">Email message body.</param>  
        </member>
        <member name="M:Zebble.Device.Messaging.SendEmail(Zebble.Device.EmailMessage,Zebble.OnError)">
            <summary>Send an email using the default email application on the device.</summary>
        </member>
        <member name="M:Zebble.Device.Messaging.PhoneCall(System.String,System.String,Zebble.OnError)">
            <summary>
            Make a phone call using the default dialer UI on the device.
            </summary>
            <param name="number">Number to phone</param>
        </member>
        <member name="F:Zebble.Device.App.Activated">
            <summary>
            Called when the application is launched and every time the app returns to the foreground.
            You can restart any tasks that were paused (or not yet started) while the application was inactive.
            If the application was previously in the background, optionally refresh the user interface.
            Warning: This is invoked on the UI thread. Your code must also run on the UI thread.
            </summary>
        </member>
        <member name="E:Zebble.Device.App.WentIntoBackground">
            <summary>
            Use this method to release shared resources, save user data, invalidate timers and store the application state.
            If your application supports background exection this method is called instead of WillTerminate when the user quits.
            Warning: This is invoked on the UI thread. Your code must also run on the UI thread.
            </summary>
        </member>
        <member name="E:Zebble.Device.App.Closing">
            <summary>
            Raised (on the UI thread) when the application is closing.
            In iOS this is never invoked unless UIApplicationExitsOnSuspend is set in the info.plist, in which case WentIntoBackground is never invoked.
            It's recommended that you only use WentIntoBackground for a consistent experience.
            </summary>
        </member>
        <member name="M:Zebble.Device.App.Close">
            <summary>
            Will shut down the app.
            </summary> 
        </member>
        <member name="M:Zebble.Device.Log.AsyncMessage(System.Object)">
            <summary>
            Writes a message to the log without affecting the current thread's execution speed.
            It's used for scenarios when a normal log affects the outcome.
            </summary>
        </member>
        <member name="M:Zebble.Device.Log.Values(System.Object,System.String,System.Boolean)">
            <summary>
            Logs a set of variables' values.
            </summary>
            <param name="variables">An anonymous object containing all variables you want to output. For example: Device.Log.Values(new { variable1, variable2, something.Anotherthing })</param>
            <param name="title">An optional message to be displayed before the log.</param>
            <param name="sameLine">When you log more than one variable, this determines whether the values should be displayed in one line or multiple lines.</param>
        </member>
        <member name="M:Zebble.Device.Media.TakePhoto(Zebble.Device.MediaCaptureSettings,Zebble.OnError)">
            <summary>Saves a picked photo file into a local temp folder in the device's cache folder and returns it.</summary>
        </member>
        <member name="M:Zebble.Device.Media.TakeVideo(Zebble.Device.MediaCaptureSettings,Zebble.OnError)">
            <summary>Saves a taken video into a local temp folder in the device's cache folder and returns it.</summary>
        </member>
        <member name="M:Zebble.Device.Media.PickPhoto(Zebble.OnError)">
            <summary>Saves a picked photo into a local temp folder in the device's cache folder and returns it.</summary>
        </member>
        <member name="M:Zebble.Device.Media.PickVideo(Zebble.OnError)">
            <summary>Saves a picked video into a local temp folder in the device's cache folder and returns it.</summary>
        </member>
        <member name="M:Zebble.Device.Media.SaveToAlbum(System.IO.FileInfo,Zebble.OnError)">
            <summary>
            Saves a specified image file to the device's camera roll.
            </summary>
        </member>
        <member name="F:Zebble.Device.Accelerometer.DeviceShaken">
            <summary>
            This event is raised when the device is shaken.
            Due to battery usage overheads, this is disabled by default, 
            unless you set Device.System.DetectShaking to true in Config.xml.
            </summary>
        </member>
        <member name="M:Zebble.Device.Speech.GetNormalizedSpeed(System.Single)">
            <summary>
            It should be between 0 and 1 and it`s defalt is 0.5;
            </summary>
        </member>
        <member name="M:Zebble.Device.Speech.Speak(System.String,Zebble.Device.SpeechSettings,Zebble.OnError)">
            <summary>
            Speaks a specified text using the device's operating system.
            </summary>
        </member>
        <member name="P:Zebble.Device.SpeechSettings.Language">
            <summary>If not specified, the device's default language will be used.</summary>
        </member>
        <member name="P:Zebble.Device.SpeechSettings.Pitch">
            <summary>Normal pitch (default) is 1.</summary>
        </member>
        <member name="P:Zebble.Device.SpeechSettings.Speed">
            <summary>Normal speed (default) is 1 and It could be a value between 0 to 10.</summary>
        </member>
        <member name="P:Zebble.Device.SpeechSettings.Volume">
            <summary>Anything from 0 to 1.</summary>
        </member>
        <member name="M:Zebble.Device.OS.GetAppRatingUrl">
            <summary>Gets the url to rate this app on the App store, Google store or Windows store.</summary>
        </member>
        <member name="P:Zebble.Device.IO.DocumentsFolder">
            <summary>
            Return the documents directory for the current user. 
            </summary>
        </member>
        <member name="P:Zebble.Device.IO.PersonalFolder">
            <summary>
            Return the personal or home directory for the current user. 
            On non-Windows operating systems, this is the user's home directory.
            </summary>
        </member>
        <member name="M:Zebble.Device.IO.NormalizePath(System.String)">
            <summary>
             Will conver a specified path to a cross-platform compatible relative path.
             It will be lowercase, uses underscore instead of hyphen, uses / instead of \ and doesn't start with /.
             However if it's an absolute path, it will be returned intact.
            </summary>
        </member>
        <member name="M:Zebble.Device.IO.AbsolutePath(System.String)">
            <summary>
            It takes a relative path as input, and returns the physical path on the device. 
            It assumes that the file / folder is inside the Resources directory. 
            It's case insensitive as all files are turned into lowercase.
            Example: For Images/Abc.png it returns (...)/Resources/Images/Abc.png.
            </summary>
        </member>
        <member name="M:Zebble.Device.IO.CreateTempDirectory(System.Boolean)">
            <summary>
            Creates a temporary directory in either the local app storage folder under .\temp\ or in the OS global cache directory.
            If global cache is used (default), it can be cleaned by the OS when needed.
            </summary>
        </member>
        <member name="M:Zebble.Device.IO.CreateTempFile(System.String,System.Boolean)">
            <summary>
            Returns a temp file name, as a new guid, in the temp directory.
            </summary>
            <param name="extension">The file extension needed, e.g. .png</param>
            <param name="globalCache">If global cache is used (default), it can be cleaned by the OS when needed.</param>
        </member>
        <member name="M:Zebble.Device.IO.GetTempRoot(System.Boolean)">
            <summary>
            Returns the root temp folder in which to create temp files and folders.
            </summary>
            <param name="globalCache">If global cache is used (default), it can be cleaned by the OS when needed.</param>
        </member>
        <member name="T:Zebble.Device.LocationTrackingSettings">
            <summary>Currently used for iOS only, and ignored in other operating systems.</summary>
        </member>
        <member name="P:Zebble.Device.LocationTrackingSettings.ReportInterval">
            <summary>
            The requested minimum time interval between location updates, in milliseconds. If your application requires updates infrequently, set this value so that location services can conserve power by calculating location only when needed.
            </summary>
        </member>
        <member name="P:Zebble.Device.LocationTrackingSettings.MovementThreshold">
            <summary>The minimum distance of movement needed (in meters) relative to the coordinate from the last change event to report an update.</summary>
        </member>
        <member name="P:Zebble.Device.LocationTrackingSettings.AllowBackgroundUpdates">
            <summary>Whether background location updates are allowed (iOS 9+).</summary>
        </member>
        <member name="P:Zebble.Device.LocationTrackingSettings.AutoPauseWhenSteady">
            <summary>Whether location updates should be paused automatically when the location is unlikely to change (iOS 6+). True by default.</summary>
        </member>
        <member name="P:Zebble.Device.LocationTrackingSettings.Purpose">
            <summary>
            The purpose of tracking. This is used by the OS to determine when to auto-pause location updates (iOS 6+).
            </summary>
        </member>
        <member name="P:Zebble.Device.LocationTrackingSettings.IgnoreSmallChanges">
            <summary>Whether the location manager should only listen for significant changes in location, rather than continuous listening (iOS 4+)./// </summary>
        </member>
        <member name="P:Zebble.Device.LocationTrackingSettings.DeferLocationUpdates">
            <summary> Whether the location manager should defer location updates until an energy efficient time arrives, or distance and time criteria are met (iOS 6+).</summary>
        </member>
        <member name="P:Zebble.Device.LocationTrackingSettings.DeferralTime">
            <summary> If deferring location updates, the minimum time that should elapse before updates are delivered (iOS 6+). Set to null for indefinite wait. Default:  5 minutes</summary>
        </member>
        <member name="T:Zebble.Device.LocationTrackingPurpose">
            <summary>Used to determine when to automatically pause location updates, which depends on the amount of expected change to warrant re-enabling location updates.</summary>
        </member>
        <member name="F:Zebble.Device.LocationTrackingPurpose.AutomotiveNavigation">
            <summary>GPS is used for automobile navigation.</summary>
        </member>
        <member name="F:Zebble.Device.LocationTrackingPurpose.OtherNavigation">
            <summary>GPS is used to track movements for other navigation such as boat, train, or plane.</summary>
        </member>
        <member name="F:Zebble.Device.LocationTrackingPurpose.Fitness">
            <summary>GPS is used for pedestrian activity.</summary>
        </member>
        <member name="F:Zebble.Device.PermissionResult.FeatureDisabled">
            <summary>Currently only used for location services.</summary>
        </member>
        <member name="F:Zebble.Device.PermissionResult.Restricted">
            <summary>Restricted - only for iOS</summary>
        </member>
        <member name="M:Zebble.UIThread.RunAction(System.Action)">
            <summary>Schedules a specified action to be done on the UI thread, and returns immediately.</summary>
        </member>
        <member name="M:Zebble.UIThread.Post(System.Action)">
            <summary>Schedules a specified action to be done on the UI thread, and returns immediately.
            If the current thread is already the UI thread, then the action will be posted 
            to run when the UI thread is done doing current tasks.</summary>
        </member>
        <member name="P:Zebble.UIRuntime.Window">
            <summary>
            Gets the key window of the app.
            </summary>
        </member>
        <member name="F:Zebble.UIRuntime.OnOpenUrl">
            <summary>
            This will be called whenever a new url opens in app
            </summary>
        </member>
        <member name="P:Zebble.Font.FontSizeScale">
            <summary>
            Allows you to dynamically upscale or downscale the font sizes across the whole application.
            The native renderers will multiply the font size by this to find the effective rendering size.
            </summary>
        </member>
        <member name="P:Zebble.Font.EffectiveSize">
            <summary>
            Multiplies the font size by the FontSizeScale.
            </summary>
        </member>
        <member name="P:Zebble.Animation.Bounces">
            <summary>Specifies the number of bounces (used only for EaseInBounceOut).</summary>
        </member>
        <member name="P:Zebble.Animation.Bounciness">
            <summary>
            Specifies how bouncy the bounce animation is.
            Low values of this property result in bounces with little loss of height between bounces (more bouncy).
            High values result in dampened bounces(less bouncy).
            </summary>
        </member>
        <member name="P:Zebble.Animation.Repeats">
            <summary>If set to -1, it will repeat forever.</summary>
        </member>
        <member name="M:Zebble.Animation.Cancel(Zebble.View)">
            <summary>
            Stops this running animation.
            </summary>
        </member>
        <member name="M:Zebble.Animation.GetTimeToCompletion">
            <summary>
            If it repeats forever, returns Zero. Otherwise returns the duration multiplied by repeats.
            </summary>
        </member>
        <member name="F:Zebble.Services.ImageService.ImageProvider.Ready">
            <summary>
            Fired when Image is loaded, decoded and ready for use.
            </summary>
        </member>
        <member name="M:Zebble.Services.ImageService.DisposeCache">
            <summary>
            It will disposed images which are not currently being viewed.
            This should be invoked in case of meomry pressure.
            </summary>
        </member>
        <member name="M:Zebble.Services.ImageService.GetPixelSize(Zebble.Size,Zebble.Size,Zebble.Stretch)">
            <summary>
            Gets the correct pixel size to encode or decode an image based on a specified display frame and stretch.
            </summary>
            <param name="imageSize">Image size in pixels.</param>
            <param name="displayFrame">Target display size in Zebble UI (logical point).</param>
        </member>
        <member name="F:Zebble.Services.ImageService.ImageDownloaded">
            <summary>
            Fired every time an image is downloaded from a remote URL.
            </summary>
        </member>
        <member name="M:Zebble.Services.ImageService.IsDownloaded(System.String)">
            <summary>
            Determines a specified remote image has already been downloaded.
            </summary> 
        </member>
        <member name="M:Zebble.Services.ImageService.GetViewSize(System.String)">
            <summary>
            Gets the pixel size of the specified image file divided by the screen density.
            </summary>
        </member>
        <member name="T:Zebble.Services.GeoLocationService">
            <summary>
            Provides location services.
            </summary>
        </member>
        <member name="M:Zebble.Services.GeoLocationService.GetPostcodeLocation(System.String,System.String)">
            <summary>
             Gets the Geo Location of a specified postcode using Google API.
             This method has daily usage limit of 25000 calls.
            </summary>
        </member>
        <member name="M:Zebble.Services.GeoLocationService.CalculateDistance(System.String,System.String,System.String)">
            <summary>
            Gets the distance between 2 locations in miles.
            </summary>
        </member>
        <member name="P:Zebble.Services.GeoPosition.Altitude">
            <summary>The altitude relative to sea level in meters.</summary>
        </member>
        <member name="P:Zebble.Services.GeoPosition.Accuracy">
            <summary>The potential error radius in meters.</summary>
        </member>
        <member name="P:Zebble.Services.GeoPosition.AltitudeAccuracy">
            <summary>The potential altitude error range in meters.</summary>
        </member>
        <member name="P:Zebble.Services.GeoPosition.Speed">
            <summary>The speed in meters per second.</summary>
        </member>
        <member name="T:Zebble.Services.IdentifierGenerator">
            <summary>
            Generates an identifier for a given string value.
            </summary>
        </member>
        <member name="P:Zebble.Services.IdentifierGenerator.Value">
            <summary>
            Gets or sets the Value of this IdentifierGenerator.
            </summary>
        </member>
        <member name="M:Zebble.Services.IdentifierGenerator.#ctor(System.String)">
            <summary>
            Creates a new IdentifierGenerator instance.
            </summary>
        </member>
        <member name="M:Zebble.Services.IdentifierGenerator.Build">
            <summary>
            Builds the identifer
            </summary>
        </member>
        <member name="M:Zebble.Services.XmlProperties.#ctor(System.String)">
            <summary>
            Creates a new XmlProperties instance.
            </summary>
        </member>
        <member name="M:Zebble.Services.XmlProperties.#ctor">
            <summary>
            Creates a new XmlProperties instance.
            </summary>
        </member>
        <member name="M:Zebble.Services.XmlProperties.ToString">
            <summary>
            Returns the XML representation of this instance.
            </summary>
        </member>
        <member name="M:Zebble.Services.IdleUITasks.SeemsIdle">
            <summary>
            Determines if it's been 300ms since the last gesture action or the last rendering.
            </summary>
        </member>
        <member name="M:Zebble.Services.IdleUITasks.Run(System.String,System.Action)">
            <summary>
             Schedules an action to run when the UI thread appears free.
            </summary>
        </member>
        <member name="T:Zebble.Services.Timer">
            <summary>
            Runs a specified action regularly in another thread at exactly the specified intervals.
            </summary>
        </member>
        <member name="F:Zebble.Services.Timer.WaitingOption.Parallel">
            <summary>
            Run the action on a new thread exactly at the specified intervals, irrespective of how long it takes.
            </summary>
        </member>
        <member name="F:Zebble.Services.Timer.WaitingOption.WaitForCompletion">
            <summary>
            Run the action and wait for its completion, then wait for the interval duration.
            </summary>
        </member>
        <member name="M:Zebble.Renderer.IsDead(Zebble.View@)">
            <summary>
            Gets the current view if it's not disposing.
            </summary>
        </member>
        <member name="T:Zebble.EventHandlerDisposer">
            <summary>
            Provides a mechanism to prevent event handler dependency memory leaks.
            </summary>
        </member>
        <member name="M:Zebble.EventHandlerDisposer.DisposeAll">
            <summary>
            Will dispose all registered event handlers and clear them from the list.
            </summary>
        </member>
        <member name="F:Zebble.AbstractAsyncEvent.ConcurrentRaisePolicy">
            <summary>
            Determines how concurrent attempts to raise an event should be handled.
            </summary>
        </member>
        <member name="M:Zebble.AbstractAsyncEvent.ClearHandlers">
            <summary>Removes all current handlers from this event.</summary>
        </member>
        <member name="M:Zebble.AbstractAsyncEvent.AwaitRaiseCompletion">
            <summary>
            Returns a tasks that completes once as soon as this event is fired.
            </summary>
        </member>
        <member name="M:Zebble.AsyncEvent`1.RaiseOn(Zebble.BaseThread,`0)">
            <summary>Will run its event handlers on the UI or ThreadPool as specified.</summary>
        </member>
        <member name="M:Zebble.AsyncEventExtensions.RemoveActionHandler``1(``0,System.Action)">
            <summary>
            The same as RemoveHandler.
            It's added to get past the strange bug in C# for selecting the correct overload of RemoveHandler().
            </summary>
        </member>
        <member name="M:Zebble.AsyncEventExtensions.HandleWith``1(``0,System.Action,System.String,System.Int32)">
            <summary>
            The same as Handle. It's added to get past the strange bug in C# for selecting the correct overload of Handle().
            </summary> 
        </member>
        <member name="M:Zebble.AsyncEventExtensions.HandleActionOn``1(``0,Zebble.BaseThread,System.Action,System.String,System.Int32)">
            <summary>
            The same as HandleOn. It's added to get past the strange bug in C# for selecting the correct overload of HandleOn().
            </summary> 
        </member>
        <member name="M:Zebble.AsyncEventExtensions.CreateActionHandler``1(``0,System.Action,Zebble.BaseThread,System.String,System.Int32)">
            <summary>
            Creates an event handler which you can dispose of explicitly if required.
            </summary>
        </member>
        <member name="M:Zebble.AsyncEventExtensions.CreateHandler``1(``0,System.Func{System.Threading.Tasks.Task},Zebble.BaseThread,System.String,System.Int32)">
            <summary>
            Creates an event handler which you can dispose of explicitly if required.
            </summary>
        </member>
        <member name="M:Zebble.AsyncEvent.RaiseOn(Zebble.BaseThread)">
            <summary>Will run its event handlers on the UI or ThreadPool as specified.</summary>
        </member>
        <member name="T:Zebble.Bindable`1">
            <summary>
            Provides a wrapper around a property value which can be used in data binding.
            </summary>
        </member>
        <member name="M:Zebble.Bindable`1.AddBinding(System.Object,System.String)">
            <summary>
            Binds a specified object's property this this instance, so every time my value is changed, it will be applied automatically on the target.
            </summary>
            <param name="target">The target object whose property should be bound to my value.</param>
            <param name="propertyName">The property of the target object that should have my value.</param>
        </member>
        <member name="T:Zebble.ConcurrentEventRaisePolicy">
            <summary>
            Determines how concurrent attempts to raise an event should be handled.
            </summary>
        </member>
        <member name="F:Zebble.ConcurrentEventRaisePolicy.Ignore">
            <summary>
            A new concurrent attempt to raise this event should be ignored while the previous raise is still running.
            </summary>
        </member>
        <member name="F:Zebble.ConcurrentEventRaisePolicy.Queue">
            <summary>
            A new concurrent attempt to raise this event should be queued to run after the previous raise is still running.
            </summary>
        </member>
        <member name="F:Zebble.ConcurrentEventRaisePolicy.Parallel">
            <summary>
            A new concurrent attempt to raise this event should run immediately irrespective of any unfinished previous raise.
            </summary>
        </member>
        <member name="T:Zebble.AsyncLock">
            <summary> A recursive mutual exclusion lock that to use with async code.</summary>
        </member>
        <member name="T:Zebble.Config">
            <summary>
            Provides shortcut access to the value specified in web.config (or App.config) under AppSettings.
            </summary>
        </member>
        <member name="M:Zebble.Config.Get(System.String,System.String)">
            <summary>
            Gets the value configured in Web.Config (or App.config) under AppSettings.
            If no value is found there, it will return the specified default value.
            </summary>
        </member>
        <member name="M:Zebble.Config.Get(System.String)">
            <summary>
            Gets the value configured in Web.Config (or App.config) under AppSettings.
            </summary>
        </member>
        <member name="M:Zebble.Config.Get``1(System.String)">
            <summary>
            Reads the value configured in Web.Config (or App.config) under AppSettings.
            It will then convert it into the specified type.
            </summary>
        </member>
        <member name="M:Zebble.Config.Get``1(System.String,``0)">
            <summary>
            Reads the value configured in Web.Config (or App.config) under AppSettings.
            It will then convert it into the specified type.
            If no value is found there, it will return the specified default value.
            </summary>
        </member>
        <member name="M:Zebble.Config.TryGet``1(System.String)">
            <summary>
            Reads the value configured in Web.Config (or App.config) under AppSettings.
            It will then try to convert it into the specified type.
            If no vale is found in AppSettings or the conversion fails, then it will return null, or the default value of the specified type T.
            </summary>
        </member>
        <member name="M:Zebble.Config.IsDefined(System.String)">
            <summary>
            Determines whether the specified key is defined in configuration file.
            </summary>
        </member>
        <member name="M:Zebble.GeoLocationExtensions.GetDistance(Zebble.Services.IGeoLocation,Zebble.Services.IGeoLocation)">
            <summary>
            Gets the geo distance in miles between this and another specified location.
            </summary>
        </member>
        <member name="M:Zebble.GeoLocationExtensions.GetDistance(Zebble.Services.IGeoLocated,Zebble.Services.IGeoLocation)">
            <summary>
            Gets the geo distance in miles between this located object and a specified location.
            </summary>
        </member>
        <member name="M:Zebble.GeoLocationExtensions.GetDistance(Zebble.Services.IGeoLocation,Zebble.Services.IGeoLocated)">
            <summary>
            Gets the geo distance in miles between this location and a specified located object.
            </summary>
        </member>
        <member name="M:Zebble.GeoLocationExtensions.GetDistance(Zebble.Services.IGeoLocated,Zebble.Services.IGeoLocated)">
            <summary>
            Gets the geo distance in miles between this and another specified located object.
            </summary>
        </member>
        <member name="M:Zebble.BaseThread.Run(System.Action)">
            <summary>Schedules a specified action to be done on this thread, but allows you to await it before continuing.</summary>
        </member>
        <member name="M:Zebble.BaseThread.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>Schedules a specified action to be done on this thread, but allows you to await it before continuing.</summary>
        </member>
        <member name="M:Zebble.BaseThread.Run``1(System.Func{``0})">
            <summary>Runs a specified expression run on this thread but returns the result on the calling context.</summary>
        </member>
        <member name="M:Zebble.BaseThread.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>Runs a specified expression run on this thread but returns the result on the calling context.</summary>
        </member>
        <member name="M:Zebble.ThreadPool.RunActionOnNewThread(System.Action)">
            <summary>
            Ensures a new thread is created to run a specified action, and returns immediately.
            This is useful mainly when your code is currently running on a non-UI thread, but you don't want it to wait for running the specified action.
            </summary>
        </member>
        <member name="M:Zebble.ThreadPool.RunOnNewThread(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Ensures a new thread is created to run a specified task, and returns immediately.
            This is useful mainly when your code is currently running on a non-UI thread, but you don't want it to wait for running the specified action.
            </summary>
        </member>
        <member name="F:Zebble.Nav.Navigating">
            <summary>
            Raised before even the target page is necessarily rendered.
            </summary>
        </member>
        <member name="F:Zebble.Nav.NavigationAnimationStarted">
            <summary>
            Raised when the target page is rendered and added to the UI tree, and the transitoin animation has just started.
            </summary>
        </member>
        <member name="F:Zebble.Nav.Navigated">
            <summary>
            Raised after the transition animation is completed.
            </summary>
        </member>
        <member name="M:Zebble.Nav.DisposeCache">
            <summary>
            Removes and disposes all currently cached pages.
            </summary>
        </member>
        <member name="M:Zebble.Nav.DisposeCache(System.Type)">
            <summary>
            Removes and disposes all currently cached pages of the specified type.
            </summary>
        </member>
        <member name="M:Zebble.Nav.Go``1(Zebble.PageTransition)">
            <summary>Redirects to the specified page.</summary>
        </member>
        <member name="M:Zebble.Nav.Go``1(System.Object,Zebble.PageTransition)">
            <summary>Redirects to the specified page.</summary>
            <param name="navParams">Provide either an IDictioniary[string, object] or an anonymous object.</param>
        </member>
        <member name="M:Zebble.Nav.Reload">
            <summary>Reloads the current page.</summary>
        </member>
        <member name="M:Zebble.Nav.Go(Zebble.Page,Zebble.PageTransition)">
            <summary>Redirects to the specified page.</summary>
        </member>
        <member name="M:Zebble.Nav.Go(Zebble.Page,System.Object,Zebble.PageTransition,System.Boolean)">
            <summary>Redirects to the specified page.</summary>
            <param name="navParams">Provide either an IDictioniary[string, object] or an anonymous object.</param>
        </member>
        <member name="M:Zebble.Nav.GoBack``1(System.Object)">
            <summary>This is the same as Go() but with the reverse transition. </summary>
        </member>
        <member name="M:Zebble.Nav.GoBack(Zebble.Page,System.Object)">
            <summary>This is the same as Go() but with the reverse transition. </summary>
        </member>
        <member name="M:Zebble.Nav.Forward``1(Zebble.PageTransition)">
            <summary>The same as Go() but it also adds the page to the Stack to enable «going back».</summary>
        </member>
        <member name="M:Zebble.Nav.Forward``1(System.Object,Zebble.PageTransition)">
            <summary>The same as Go() but it also adds the page to the Stack to enable «going back».</summary>
            <param name="navParams">Provide either an IDictioniary[string, object] or an anonymous object.</param>
        </member>
        <member name="M:Zebble.Nav.Forward(Zebble.Page,System.Object,Zebble.PageTransition)">
            <summary>The same as Go() but it also adds the page to the Stack to enable «going back».</summary>
            <param name="navParams">Provide either an IDictioniary[string, object] or an anonymous object.</param>
        </member>
        <member name="M:Zebble.Nav.Back">
            <summary>
            Removes the current page from the stack, and navigates to the previous page in the stack.
            This should be called after a Forward() call in scenarios where the navigation is in one journey that has back and forward concept.
            </summary>
        </member>
        <member name="M:Zebble.Nav.ShowPopUp``1(``0,System.Object,Zebble.PageTransition)">
            <summary>
            Loads a page in a pop-up container on top of the current page.
            It won't change the current navigation stack.
            </summary>
        </member>
        <member name="T:Zebble.UIWorkBatch">
            <summary>
            Runs a batch of UI creation / change work by suspending native layout during the change process.
            </summary>
        </member>
        <member name="M:Zebble.UIWorkBatch.Raise(Zebble.AsyncEvent)">
            <summary>
            If it's running in a Batch context, the event will just be enlisted, otherwise it will run straight away.
            </summary>
        </member>
        <member name="M:Zebble.UIWorkBatch.Raise(Zebble.AsyncEvent{Zebble.Animation},Zebble.Animation)">
            <summary>
            If it's running in a Batch context, the event will just be enlisted, otherwise it will run straight away.
            </summary>
        </member>
        <member name="T:Zebble.Stylesheet.State`1">
            <summary>
            Provides a mechanism to apply a temporary visual style change on a view without ruining its Css and Style settings after the temporary change is reversed.
            </summary>
        </member>
        <member name="M:Zebble.Stylesheet.Preserve``1(Zebble.View,System.Linq.Expressions.Expression{System.Func{Zebble.Stylesheet,``0}})">
            <summary>
            Provides a mechanism to apply a temporary visual style change on a view without ruining its Css and Style settings after the temporary change is reversed.
            </summary>
        </member>
        <member name="P:Zebble.Stylesheet.Rotation">
            <summary>Rotation in degrees around the Z axis.</summary>
        </member>
        <member name="P:Zebble.Stylesheet.RotationX">
            <summary>Rotation in degrees around the X axis.</summary>
        </member>
        <member name="P:Zebble.Stylesheet.RotationY">
            <summary>Rotation in degrees around the Y axis.</summary>
        </member>
        <member name="P:Zebble.Length.AsText">
            <summary>
            Returns the value of this property in a textual format.
            </summary>
        </member>
        <member name="M:Zebble.Length.BindTo(System.Func{System.Single})">
            <summary>
            Binds the value of this length to the specified expression so it can be updated later on automatically.
            This should only be used if you call UpdateOn() after calling this.
            </summary>
        </member>
        <member name="M:Zebble.Length.BindTo(Zebble.Length)">
            <summary>
            Binds the value of this length to be always the same as another length (it will cascade upon future changes too) and return itself.
            </summary>
        </member>
        <member name="M:Zebble.Length.BindTo(Zebble.Length,System.Func{System.Single,System.Single})">
            <summary>
            Binds the value of this length to be always based on another length (it will cascade upon future changes too) and return itself.
            </summary>
        </member>
        <member name="M:Zebble.Length.BindTo(Zebble.Length,Zebble.Length,System.Func{System.Single,System.Single,System.Single})">
            <summary>
            Binds the value of this length to be always based on other length objects (it will cascade upon future changes too)
            and return itself.
            </summary>
        </member>
        <member name="M:Zebble.Length.BindTo(Zebble.Length,Zebble.Length,Zebble.Length,System.Func{System.Single,System.Single,System.Single,System.Single})">
            <summary>
            Binds the value of this length to be always based on other length objects (it will cascade upon future changes too)
            and return itself.
            </summary>
        </member>
        <member name="M:Zebble.Length.BindTo(Zebble.Length,Zebble.Length,Zebble.Length,Zebble.Length,System.Func{System.Single,System.Single,System.Single,System.Single,System.Single})">
            <summary>
            Binds the value of this length to be always based on other length objects (it will cascade upon future changes too)
            and return itself.
            </summary>
        </member>
        <member name="M:Zebble.Length.BindTo(Zebble.Length,Zebble.Length,Zebble.Length,Zebble.Length,Zebble.Length,System.Func{System.Single,System.Single,System.Single,System.Single,System.Single,System.Single})">
            <summary>
            Binds the value of this length to be always based on other length objects (it will cascade upon future changes too)
            and return itself.
            </summary>
        </member>
        <member name="M:Zebble.Length.BindTo(Zebble.Length[],System.Func{System.Single[],System.Single})">
            <summary>
            Binds the value of this length to be always based on other length objects (it will cascade upon future changes too)
            and return itself.
            </summary>
        </member>
        <member name="M:Zebble.Length.Set(System.Single)">
            <summary>
            Sets this length to a specified fix point value and returns itself back.
            </summary>
        </member>
        <member name="M:Zebble.Length.Set(Zebble.Length.PercentageLengthRequest)">
            <summary>
            Sets this length to a specified percentage value and returns itself back.
            </summary>
        </member>
        <member name="M:Zebble.Length.UpdateOn(Zebble.AbstractAsyncEvent[])">
            <summary>
            Subscribes to a specified event so it gets re-evaluated after occurance of that event, and return itself.
            This should be called after the primary setter method, i.e. Set(...), SetPercent(...), or BindTo(...) because 
            each one of those, will remove all previous UpdateOn attachments.
            </summary>
        </member>
        <member name="M:Zebble.Length.RemoveUpdateDependency(Zebble.AbstractAsyncEvent)">
            <summary>
            Subscribes to a specified event so it gets re-evaluated after occurance of that event, and return itself.
            This should be called after the primary setter method, i.e. Set(...), SetPercent(...), or BindTo(...) because 
            each one of those, will remove all previous UpdateOn attachments.
            </summary>
        </member>
        <member name="M:Zebble.Length.Update">
            <summary>
            Re-evaluates the value of this length. If changed, it will cascade the change to all its dependants.
            </summary>
        </member>
        <member name="F:Zebble.Length.AutoStartegy.Content">
            <summary>The view's width or height should be calculated as the sum of its children.</summary>
        </member>
        <member name="F:Zebble.Length.AutoStartegy.Container">
            <summary>The view's width or height should be a proportional amount of the available space in its parent.
            For a stack parent, it will depend on the other children.</summary>
        </member>
        <member name="M:Zebble.Length.Set(Zebble.Length.AutoStartegy)">
            <summary>
            Sets this length to be based on the specified automatic calculation and returns itself back.
            </summary>
        </member>
        <member name="T:Zebble.MarkupAddableAttribute">
            <summary>
            When applied to a class, it makes it visible in the .ZBL markup intellisense.
            </summary>
        </member>
        <member name="F:Zebble.OptionsDataSource.Items">
            <summary>The current items for selection on the UI.</summary>
        </member>
        <member name="P:Zebble.OptionsDataSource.SelectedItems">
            <summary>The items currently selected on the UI.</summary>
        </member>
        <member name="P:Zebble.OptionsDataSource.SelectedValues">
            <summary>The values of the items currently selected on the UI.</summary>
        </member>
        <member name="P:Zebble.OptionsDataSource.SelectedValue">
            <summary>The value of the first item currently selected on the UI.</summary>
        </member>
        <member name="F:Zebble.OptionsDataSource.apiSelectedValues">
            <summary>
            The selected values should be maintained seperately,
            so DataSource and Value can be set time-independently.
            </summary>
        </member>
        <member name="P:Zebble.Canvas.ClipChildren">
            <summary>
            Determines whether the children of this canvas should be clipped to the size of the canvas (in case they are larger).
            By default it's True.
            </summary>
        </member>
        <member name="T:Zebble.Overlay">
            <summary>
            This will handle 
            </summary>
        </member>
        <member name="P:Zebble.Stack.ManagedChildren">
            <summary>
            Gets the child views which are not ignored or absolute (in which case this stack will manage their X, Y).
            </summary>
        </member>
        <member name="M:Zebble.Stack.RearrangeItemsHorizontally">
            <summary>Sets the X of all items. It ignores their Width.</summary>
        </member>
        <member name="M:Zebble.TreeView.Node.#ctor(Zebble.Services.IHierarchy)">
            <summary>Will create new node for this item and its descendents hierarchy.</summary> 
        </member>
        <member name="M:Zebble.StylesheetPropertyExtensions.Hide``1(Zebble.Stylesheet)">
            <summary>Sets Visible to false.</summary>
        </member>
        <member name="M:Zebble.StylesheetPropertyExtensions.Size(Zebble.Stylesheet,Zebble.Length.LengthRequest)">
            <summary>
            Sets both width and height to the same value.
            </summary>
        </member>
        <member name="P:Zebble.TextControl.Font">
            <summary>
            This gives you the current font information, derived from its own styles and CSS.
            To change it, use myView.Styles.Font
            </summary>
        </member>
        <member name="F:Zebble.View.CssReference">
            <summary>
            A reference based on its type, id, cssClass and psudo css class.
            </summary>
        </member>
        <member name="M:Zebble.View.SetCssClass(System.String)">
            <summary>
            If setting the css class after an object is rendered, use this method and await the result.
            </summary>
        </member>
        <member name="M:Zebble.View.ApplyStyles">
            <summary>
            This is invoked just before PreRender. It applies the applicable CSS rules on the object.
            </summary>
        </member>
        <member name="F:Zebble.View.Panning">
            <summary>
            Raised for every tiny movement (usually around a pixel) of the touch while panning.
            </summary>
        </member>
        <member name="F:Zebble.View.PanFinished">
            <summary>
            Raised when after a whole process of panning, the touch device (e.g. mouse or finger) is released.
            </summary>
        </member>
        <member name="M:Zebble.View.RaiseTapped">
            <summary>Will raise the tapped event with the location of 0,0.</summary>
        </member>
        <member name="F:Zebble.View.DomLock">
            <summary>
            A lock object used for adding and removing the document object model, i.e. the descendents of this view.
            If you're making large changes to the UI structure in response to user gesture events,
            then wrap your code in a using block to await this lock's LockAsync() method return,
            to prevent conflicting concurrent changes.
            </summary>
        </member>
        <member name="P:Zebble.View.Data">
            <summary>
            Provides a dictionary that can be used to attach any custom data on the view.
            </summary>
        </member>
        <member name="P:Zebble.View.Rotation">
            <summary>
            Rotation around the Z Index (aka 2D rotate).
            </summary>
        </member>
        <member name="M:Zebble.View.IsVisibleOnScreen">
            <summary>
            Determines if this element is practically visible considering the Size,
            Position, Visible, Ignored and opacity settings of itself and its parents.
            </summary>
        </member>
        <member name="M:Zebble.View.InitializeFromMarkup">
            <summary>
            Creates child objects from a ZBL markup file.
            </summary>
        </member>
        <member name="M:Zebble.View.RaiseShown">
            <summary>
            This is fired every time the view is shown.
            If the view is within a cached page, then everytime it's shown again, this event is fired.
            </summary>
        </member>
        <member name="M:Zebble.View.WhenShown(System.Func{System.Threading.Tasks.Task},System.String,System.Int32)">
            <summary>
            Runs a specified action when this view is shown. If it's already shown, then it runs it immediately.
            </summary>
        </member>
        <member name="M:Zebble.View.WhenShown(System.Action)">
            <summary>
            Runs a specified action when this view is shown. If it's already shown, then it runs it immediately.
            </summary>
        </member>
        <member name="F:Zebble.View.AddToNativeParent">
            <summary>
            Adds the native (rendered) element of this view to the native parent.
            </summary>
        </member>
        <member name="P:Zebble.View.Root">
            <summary>
            Returns the root container view on the screen. This is the same as UIRuntime.PageContainer.
            </summary>
        </member>
        <member name="F:Zebble.View.AllChildren">
            <summary>
            Gets all children whether or not they are ignored.
            </summary>
        </member>
        <member name="P:Zebble.View.CurrentChildren">
            <summary>Gets a copy of the children which are not ignored, so it's thread safe.</summary>
        </member>
        <member name="M:Zebble.View.AllDescendents">
            <summary>
            Gets all children and their nested children (recursive) whether or not they are ignored.
            </summary>
        </member>
        <member name="M:Zebble.View.CurrentDescendants">
            <summary>
            Gets the current children and their nested children (recursive) which are not ignored.
            </summary>
        </member>
        <member name="M:Zebble.View.IsRendered">
            <summary>
            Determines if this view is rendered already (i.e. has its Native property set).
            Note: The view may be rendered but not be added to a native parent yet.
            Consider using IsShown instead.
            </summary>
        </member>
        <member name="M:Zebble.View.Add``1(``0,System.Boolean)">
            <summary>
            Adds an element to the virtual DOM. It also calls its OnInitializing. 
            </summary>
            <param name="awaitNative">Determines whether it should wait until  it's fully added to the real native UI.</param>
        </member>
        <member name="P:Zebble.View.AllSiblings">
            <summary>
            Will return all siblings views of this view (whether or not they are Ignored).
            </summary>
        </member>
        <member name="P:Zebble.View.CurrentSiblings">
            <summary>
            Will return all siblings views of this view which are not Ignored.
            </summary>
        </member>
        <member name="M:Zebble.View.ClearChildren">
            <summary>
            Remvoes all children without awaiting native action.
            </summary>
        </member>
        <member name="M:Zebble.View.WithAllParents">
            <summary>Gets this view as well as all its parents hierarchy.</summary>
        </member>
        <member name="M:Zebble.View.GetAllParents">
            <summary>Gets this view as well as all its parents hierarchy.</summary>
        </member>
        <member name="M:Zebble.View.CalculateAbsoluteX">
            <summary>
            Gets the X of this view from the top left corner of the device screen. 
            </summary>
        </member>
        <member name="M:Zebble.View.CalculateAbsoluteY">
            <summary>
            Gets the Y of this view from the top left corner of the device screen. 
            </summary>
        </member>
        <member name="M:Zebble.View.PushBackToZIndexOrder">
            <summary>
            Ensures any siblings with higher Zindex come on top of this.
            </summary>
        </member>
        <member name="P:Zebble.View.NativeX">
            <summary>
             Gets the current X of the native Object. Useful to check the progress of animations.
            </summary>
        </member>
        <member name="P:Zebble.View.NativeY">
            <summary>
             Gets the current Y of the native Object. Useful to check the progress of animations.
            </summary>
        </member>
        <member name="M:Zebble.View.CalculateTotalHeight">
            <summary>
            Returns the calculated height plus the total vertical margin.
            </summary>
        </member>
        <member name="M:Zebble.View.CalculateTotalWidth">
            <summary>
            Returns the calculated width plus the total horizontal margin.
            </summary>
        </member>
        <member name="M:Zebble.ViewExtensions.AllChildren``1(Zebble.View)">
            <summary>
            Gets all children which are of the specified type whether or not they are ignored.
            </summary>
        </member>
        <member name="M:Zebble.ViewExtensions.AllSiblings``1(Zebble.View)">
            <summary>
            Will return all sibling of this view  which are of the specified type whether or not they are Ignored.
            </summary>
        </member>
        <member name="M:Zebble.ViewExtensions.CurrentChildren``1(Zebble.View)">
            <summary>
            Gets the non-ignored children which are of the specified type.
            </summary>
        </member>
        <member name="M:Zebble.ViewExtensions.CurrentSiblings``1(Zebble.View)">
            <summary>
            Will return the non-ignored sibling of this view  which are of the specified type.
            </summary>
        </member>
        <member name="M:Zebble.ViewExtensions.RemoveSelf(Zebble.View)">
            <summary>
            Removes this view from its parent. It's forgiving if this, and its parent, are null.
            </summary>
        </member>
        <member name="M:Zebble.ViewExtensions.DistanceTo(System.Nullable{Zebble.Point},System.Nullable{Zebble.Point})">
            <summary>Euclidean distance for two points, or null if either of them is null.</summary>
        </member>
        <member name="F:Zebble.TextInput.UserTextChanged">
            <summary>Fired when any character is changed on this text input.</summary>
        </member>
        <member name="F:Zebble.TextInput.UserTextChangeSubmitted">
            <summary>Fired when the user is done typing by either clicking enter (or submit, go, etc) button.</summary>
        </member>
        <member name="M:Zebble.ViewPropertySetterExtensions.Hide``1(``0)">
            <summary>Sets Visible to false.</summary>
        </member>
        <member name="M:Zebble.ViewPropertySetterExtensions.BottomAlign``1(``0,Zebble.View,System.Boolean)">
            <summary>
            Will set the margin-top of this view to a value that makes its bottom the same as the specified sibling.
            </summary>
        </member>
        <member name="M:Zebble.ViewPropertySetterExtensions.CenterAlign``1(``0,System.Boolean)">
            <summary>
            Will set the margin-left of this view in a way to center align it in its parent horizontally. It assumes no siblings exist.
            </summary>
        </member>
        <member name="M:Zebble.ViewPropertySetterExtensions.MiddleAlign``1(``0,System.Boolean)">
            <summary>
            Will set the margin-top of this view in a way to middle align it in its parent vertically. It assumes no siblings exist.
            </summary>
        </member>
        <member name="M:Zebble.ViewPropertySetterExtensions.Round``1(``0)">
            <summary>
            Sets the radius of this object to 50% of its height.
            If it doesn't have an height specified, then it will be set to the ActualHeight during the Rendered event.
            </summary>
        </member>
        <member name="M:Zebble.ViewPropertySetterExtensions.Horizontal(Zebble.Gap)">
            <summary>
            Gets the sum of the current left and right values.
            </summary>
        </member>
        <member name="M:Zebble.ViewPropertySetterExtensions.Vertical(Zebble.Gap)">
            <summary>
            Gets the sum of the current top and bottom values.
            </summary>
        </member>
        <member name="M:Zebble.ViewPropertySetterExtensions.Size``1(``0,Zebble.Length.LengthRequest)">
            <summary>Sets both width and height to the same value.</summary>
        </member>
        <member name="M:Zebble.ViewPropertySetterExtensions.Size``1(``0,System.Single)">
            <summary>Sets both width and height to the same value.</summary>
        </member>
        <member name="M:Zebble.ViewPropertySetterExtensions.Size``1(``0,System.Int32)">
            <summary>Sets both width and height to the same value.</summary>
        </member>
        <member name="F:Zebble.TextTransform.Capitalize">
            <summary>Transforms the first character of each word to uppercase</summary>
        </member>
        <member name="F:Zebble.OnError.Throw">
            <summary>
            Will throw the error. If you use this, ensure to have a try-catch somewhere in the call chain. 
            </summary>
        </member>
        <member name="F:Zebble.OnError.Toast">
            <summary>
            Will show a toast (nonobstructive) message to the user.
            </summary>
        </member>
        <member name="F:Zebble.OnError.Alert">
            <summary>
            Will show a message box to the user, waiting for them to tap OK.
            </summary>
        </member>
        <member name="F:Zebble.OnError.Ignore">
            <summary>
            It will only log the error in the output window for use during development.
            </summary>
        </member>
        <member name="F:Zebble.ApiResponseCache.Prefer">
            <summary>
            If a cache is available, that's preferred and there is no need for a fresh Web Api request.
            </summary>
        </member>
        <member name="F:Zebble.ApiResponseCache.PreferThenUpdate">
            <summary>
            If a cache is available, that's returned immediately. But a call will still be made to the server to check for an update, in which case a provided refresher delegate will be invoked.
            </summary>
        </member>
        <member name="F:Zebble.ApiResponseCache.Accept">
            <summary>
            Means a new request should be sent. But if it failed and a cache is available, then that's accepted.
            </summary>
        </member>
        <member name="F:Zebble.ApiResponseCache.AcceptButWarn">
            <summary>
            A new request should be sent. But if it failed and a cache is available, then that's accepted. However a warning toast will be displayed to the user in that case to say: The latest data cannot be received from the server right now.
            </summary>
        </member>
        <member name="F:Zebble.ApiResponseCache.Refuse">
            <summary>
            Only a fresh response from the server is acceptable, and any cache should be ignored.
            </summary>
        </member>
        <member name="F:Zebble.Stretch.OriginalRatio">
            <summary>
            Will use the original image dimentions. For example you can use this along with 100% to have the height calculated automatically.
            </summary>
        </member>
        <member name="F:Zebble.Stretch.Fill">
            <summary>
            Stretches the image to completely and exactly fill the display area. This may result in the image being distorted.
            </summary>
        </member>
        <member name="F:Zebble.Stretch.Fit">
            <summary>
            Letterboxes the image (if required) so that the entire image fits into the display area. This may result in blank spaces around the image if aspect ratio of the image differs from that of the display area.
            </summary>
        </member>
        <member name="F:Zebble.Stretch.AspectFill">
            <summary>
            Clips the image so that it fills the display area while preserving the aspect (ie. no distortion).
            </summary>
        </member>
        <member name="F:Zebble.DeviceConnectionType.Cellular">
            <summary>For example 3G, 4G, Edge or LTE</summary>
        </member>
        <member name="M:Zebble.EnumExtensions.IsGranted(Zebble.Device.Permission)">
            <summary>
            Determines if this permission is already granted, but will not request the user for permission.
            </summary>
        </member>
        <member name="M:Zebble.EnumExtensions.IsRequestGranted(Zebble.Device.Permission)">
            <summary>
            Determines if this permission is already granted, or else, it will request the user for permission.
            </summary>
        </member>
        <member name="M:Zebble.EnumExtensions.IsHorizontal(Zebble.Direction)">
            <summary>True if this direction is Left or Right.</summary>
        </member>
        <member name="M:Zebble.EnumExtensions.IsVertical(Zebble.Direction)">
            <summary>True if this direction is Up or Down.</summary>
        </member>
        <member name="P:Zebble.UserRotatingEventArgs.View">
            <summary>The view on which this event was triggered.</summary>
        </member>
        <member name="P:Zebble.UserRotatingEventArgs.Touch1">
            <summary>Location of the first touch. For Windows desktop, it's the location of the mouse.</summary>
        </member>
        <member name="P:Zebble.UserRotatingEventArgs.Touch2">
            <summary>Location of the second touch. For Windows desktop, it's the location of the mouse.</summary>
        </member>
        <member name="P:Zebble.UserRotatingEventArgs.Center">
            <summary>The center point between the two touch points.</summary>
        </member>
        <member name="P:Zebble.UserRotatingEventArgs.Degrees">
            <summary>The degrees (clock-wise) by which the object was rotated.</summary>
        </member>
        <member name="M:Zebble.Gap.HasValue">
            <summary>
            Determines if any side of this gap has a non-zero gap.
            </summary>
        </member>
        <member name="P:Zebble.PannedEventArgs.View">
            <summary>
            The view on which this event was triggered.
            </summary>
        </member>
        <member name="P:Zebble.PannedEventArgs.From">
            <summary>
            For Panning event, it's the start of the latest fragment of panning.
            For PanFinished event, it's the very start of the whole panning process.
            </summary>
        </member>
        <member name="P:Zebble.PannedEventArgs.To">
            <summary>
            For Panning event, it's the end of the latest fragment of panning which is usually very close to the From value (within one or two pixes).
            For PanFinished event, it's the very last position when the touch was released.
            </summary>
        </member>
        <member name="P:Zebble.PannedEventArgs.Touches">
            <summary>
            Gets the number of touches engaged in this panning gesture.
            </summary>
        </member>
        <member name="P:Zebble.PannedEventArgs.Velocity">
            <summary>
            Gets the speed of panning (points per second) on each of the X and Y axises.
            </summary>
        </member>
        <member name="P:Zebble.PannedEventArgs.Angle">
            <summary>
            Gets the approximate angle of the panning direction based on the most recent movements.
            For example direct panning up will be 0, right: 90, bottom: 180 and left:270.
            </summary>
        </member>
        <member name="P:Zebble.PannedEventArgs.PreviousEvent">
            <summary>
            An instance of previous pan event.
            </summary>
        </member>
        <member name="P:Zebble.PinchedEventArgs.View">
            <summary>The view on which this event was triggered.</summary>
        </member>
        <member name="P:Zebble.PinchedEventArgs.Touch1">
            <summary>Location of the first touch. For Windows desktop, it's the location of the mouse.</summary>
        </member>
        <member name="P:Zebble.PinchedEventArgs.Touch2">
            <summary>Location of the second touch. For Windows desktop, it's the location of the mouse.</summary>
        </member>
        <member name="P:Zebble.PinchedEventArgs.Center">
            <summary>The center point between the two touch points.</summary>
        </member>
        <member name="P:Zebble.PinchedEventArgs.Expanded">
            <summary>
            Determines whether the selected area expanded (zoom in) or shrank (zoomed out).
            It will be true if ChangeScale is > 1.
            </summary>
        </member>
        <member name="P:Zebble.PinchedEventArgs.ChangeScale">
            <summary>
            Gets the change in the scale of the pinching.
            For example for slow zoom in it may be 1.15. For slow zoom out it can be 0.85.
            For fast zoom in it may be 1.75. For fast zoom out it can be 0.25. You get the idea.
            </summary>
        </member>
        <member name="P:Zebble.PinchedEventArgs.Shrank">
            <summary>
            Determines whether the selected area expanded (zoom in) or shrank (zoomed out).
            It's always the opposite of Expanded.
            </summary>
        </member>
        <member name="M:Zebble.Point.DistanceTo(Zebble.Point)">
            <summary>
            Euclidean distance for two points
            </summary>
        </member>
        <member name="M:Zebble.Point.Add(Zebble.Point)">
            <summary>
            Returns a new point with X = myX + another's X (and the same for Y).
            </summary>
        </member>
        <member name="M:Zebble.Point.Add(System.Single,System.Single)">
            <summary>
            Returns a new point with X and Y being the sum of mine and the specified additional value.
            </summary>
        </member>
        <member name="M:Zebble.Point.OnParentOf(Zebble.View)">
            <summary>
            Assuming this point is on a child view, it returns the relative point for the parent, which
            is basically the location of the child within the parent, plus the point.
            </summary>
        </member>
        <member name="M:Zebble.Size.LimitTo(Zebble.Size,System.Boolean)">
            <summary>
            If necessary, reduces the size to fit within a specified maximum limit in a way that both width and height of the result are less than or equal to the smallest of this and the specified max.
            </summary>
            <param name="keepAspectRatio">Whether the resulting size's aspect ratio should be the same as the original size.</param>
        </member>
        <member name="M:Zebble.Size.Square(System.Single)">
            <summary>
            Gets a new size with the same width and height as the specified value.
            </summary>
        </member>
        <member name="M:Zebble.Size.Scale(System.Single)">
            <summary>
            Gets a new size with the width and height multiplied by the specified multiplier.
            </summary>
        </member>
        <member name="M:Zebble.Size.IsLargerThan(Zebble.Size)">
            <summary>
            Returns true if both width and height are larger than another specified size.
            </summary> 
        </member>
        <member name="M:Zebble.Size.IsSmallerThan(Zebble.Size)">
            <summary>
            Returns true if both width and height are smaller than another specified size.
            </summary> 
        </member>
        <member name="M:Zebble.Size.AspectRatio">
            <summary>
            Gets width divided by height.
            </summary>
        </member>
        <member name="M:Zebble.Size.Area">
            <summary>
            Returns width * height.
            </summary>
        </member>
        <member name="M:Zebble.Alert.Prompt(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Action}[])">
            <param name="buttons">Key is the button text and value is the button action.</param> 
        </member>
        <member name="M:Zebble.StartUp.InstallIfNeeded">
            <summary>
            Installs the database and files for the first time.
            </summary>
        </member>
        <member name="P:Zebble.SwipedEventArgs.View">
            <summary>
            The view on which this event was triggered.
            </summary>
        </member>
        <member name="P:Zebble.SwipedEventArgs.Touches">
            <summary>
            Gets the number of touches engaged in this swipe gesture.
            </summary>
        </member>
        <member name="P:Zebble.TouchEventArgs.View">
            <summary>
            The view on which this event was triggered.
            </summary>
        </member>
        <member name="P:Zebble.TouchEventArgs.Touches">
            <summary>
            Gets the number of touches engaged in this touch gesture.
            </summary>
        </member>
        <member name="M:Zebble.Color.Invert">
            <summary>
            Gets the inverted color which is based on 255 minus each color component.
            </summary>
        </member>
        <member name="M:Zebble.Color.Parse(System.String)">
            <summary>
            Will return a color from its HEX string format. Example: #A2B044.
            It also supports opacity, e.g: #A2B044 20%. 
            Also you can seperate gradietn elements with a bar (|) character.
            </summary>
        </member>
        <member name="M:Zebble.Colors.PickRandom">
            <summary>Returns a random color from the list of colors with known names.</summary>
        </member>
        <member name="F:Zebble.AnimationEasing.EaseIn">
            <summary>Starts slow and then gets fast.</summary>
        </member>
        <member name="F:Zebble.AnimationEasing.EaseInOut">
            <summary>Starts fast and then gets slow.</summary>
        </member>
        <member name="F:Zebble.AnimationEasing.EaseOut">
            <summary>Starts slow and then gets fast, and then again gets slow towards the end.</summary>
        </member>
        <member name="F:Zebble.AnimationEasing.Linear">
            <summary>Same speed all along.</summary>
        </member>
        <member name="F:Zebble.AnimationEasing.EaseInBounceOut">
            <summary>Like a ball hitting the floor: starts slow, then gets fast to hit the end,
            then bounces back a bit and finally stop, </summary>
        </member>
        <member name="F:Zebble.EasingFactor.Quadratic">
            <summary>Animation should accelerates or decelerates using the formula f(t) = t^2</summary>
        </member>
        <member name="F:Zebble.EasingFactor.Cubic">
            <summary>Animation should accelerates or decelerates using the formula f(t) = t^3</summary>
        </member>
        <member name="F:Zebble.EasingFactor.Quartic">
            <summary>Animation should accelerates or decelerates using the formula f(t) = t^4</summary>
        </member>
        <member name="F:Zebble.EasingFactor.Quintic">
            <summary>Animation should accelerates or decelerates using the formula f(t) = t^5</summary>
        </member>
        <member name="M:Zebble.GradientColor.#ctor(Zebble.Point,Zebble.Point)">
            <param name="startPoint">from 0,0 to 1,1</param>
            <param name="endPoint">from 0,0 to 1,1</param>
        </member>
        <member name="M:Zebble.GradientColor.Add(Zebble.Color,System.Single)">
            <param name="stopAtPercentage">0 to 100</param>
        </member>
        <member name="T:System.EscapeGCopAttribute">
            <summary>
            When applied to a method it will skip all GCop warnings for that method (not to be abused).
            It is bad to escape any cop. Always try to avoid using this attribute by fixing your code.
            </summary>
        </member>
        <member name="T:System.ZebbleExtensions">
            <summary>
            Provides extensions methods to Standard .NET types.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            For small streams will read the date into a byte[].
            For the larger streams will set the Position to zero, and then copy all bytes to a memory stream's buffer.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.PostAsync(System.Net.Http.HttpClient,System.String,System.Object)">
            <summary>
            Posts the specified data to a url and returns the response as string.
            All properties of the postData object will be sent as individual FORM parameters to the destination.
            </summary>
            <param name = "postData">An anonymous object containing post data.</param>
        </member>
        <member name="M:System.ZebbleExtensions.GetString(System.Net.WebResponse)">
            <summary>
            Gets the response data as string.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.PostAsync(System.Uri,System.Object,System.Action{System.Net.Http.HttpClient})">
            <summary>
            Posts the specified data to this url and returns the response as string.
            All items in the postData object will be sent as individual FORM parameters to the destination.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.PostAsync(System.Uri,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{System.Net.Http.HttpClient})">
            <summary>
            Posts the specified data to this url and returns the response as string.
            All items in the postData object will be sent as individual FORM parameters to the destination.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.PostAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Posts the specified data to a url and returns the response as string.
            All items in the postData object will be sent as individual FORM parameters to the destination.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.PostAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Text.Encoding)">
            <summary>
            Posts the specified data to a url and returns the response as string.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.PostAsync(System.Net.Http.HttpClient,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Posts the specified data to a URL and returns the response as string asynchronously.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.NullIfDefault``1(``0,``0)">
            <summary>
            Returns a nullable value wrapper object if this value is the default for its type.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToYesNoString(System.Boolean,System.String,System.String)">
            <summary>
            Returns Yes or No string depending on whether the result is true of false.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToYesNoString(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Returns Yes or No string depending on whether the result is true of false.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsEnglishHoliday(System.DateTime)">
            <summary>
            Determines if a specified date is an English national holiday or weekend.
            </summary>
        </member>
        <member name="F:System.ZebbleExtensions.EarlyMayExceptions">
            <summary>
            Dictionary that contains exceptional dates for Early May Bank Holiday.
            Key: Year, Value: Exceptional Date for that year.
            </summary>
        </member>
        <member name="F:System.ZebbleExtensions.SpringBankHolidayExceptions">
            <summary>
            Dictionary that contains exceptional dates for Spring Bank Holiday.
            Key: Year, Value: Exceptional Date for that year.
            </summary>
        </member>
        <member name="F:System.ZebbleExtensions.LateSummerBankHolidayExceptions">
            <summary>
            Dictionary that contains exceptional dates for Last Summer Bank Holiday.
            Key: Year, Value: Exceptional Date for that year.
            </summary>
        </member>
        <member name="F:System.ZebbleExtensions.AdditionalBankHolidays">
            <summary>
            Dictionary that contains exceptional dates for Last Summer Bank Holiday.
            Key: Year, Value: Exceptional Date for that year.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsAdditionalBankHoliday(System.DateTime)">
            <summary>
            Check if Date it is Additional bank holiday in that year
            </summary>
            <param name="date">the date to check</param>
        </member>
        <member name="M:System.ZebbleExtensions.GetUpcoming(System.DateTime,System.DayOfWeek,System.Boolean)">
            <summary>
            Gets the first upcoming specified week day.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetLast(System.DateTime,System.DayOfWeek,System.Boolean)">
            <summary>
            Gets the last occurance of the specified week day.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetEarlyMayBankHoliday(System.Int32)">
            <summary>
            Get Early May Bank Holiday Date for the required year
            </summary>
            <param name="year">the year to check if in that year there is an exception to the normal bank holiday rule</param>
        </member>
        <member name="M:System.ZebbleExtensions.GetSpringBankHoliday(System.Int32)">
            <summary>
            Get Spring Bank Holiday Date for the required year
            </summary>
            <param name="year">the year to check if in that year there is an exception to the normal bank holiday rule</param>
            <returns></returns>
        </member>
        <member name="M:System.ZebbleExtensions.GetLateSummerBankHoliday(System.Int32)">
            <summary>
            Get Late Summer Bank Holiday Date for the required year
            </summary>
            <param name="year">the year to check if in that year there is an exception to the normal bank holiday rule</param>
            <returns></returns>
        </member>
        <member name="M:System.ZebbleExtensions.GetBoxingDay(System.Int32)">
            <summary>
            Get Boxing Day Holiday Date for the required year
            </summary>
            <param name="year">the year to check if in that year there is an exception to the normal bank holiday rule</param>
            <returns></returns>
        </member>
        <member name="M:System.ZebbleExtensions.IsInSameWeek(System.DateTime,System.DateTime)">
            <summary>
            Determines whether this day is in the same week (Monday to Sunday) as the specified other date.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsInSameMonth(System.DateTime,System.DateTime)">
            <summary>
            Determines whether this day is in the same month as the specified other date.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.DaysInYear(System.DateTime)">
            <summary>
            Gets the number of days in this year.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.DaysInMonth(System.DateTime)">
            <summary>
            Gets the number of days in this month.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetBeginningOfWeek(System.DateTime)">
            <summary>
            Gets the mid-night of Monday of this week.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetEndOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets one tick before the start of next week.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetBeginningOfMonth(System.DateTime)">
            <summary>
            Gets the mid-night of the first day of this month.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.EndOfDay(System.DateTime)">
            <summary>
            Gets the end of this day (one tick before the next day).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsInTheFuture(System.DateTime)">
            <summary>
            Determines whether this date is in the future.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsTodayOrFuture(System.DateTime)">
            <summary>
            Determines whether this date is in the future.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsToday(System.DateTime)">
            <summary>
            Determines whether this date is in the future.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToSmallTime(System.DateTime)">
            <summary>
            E.g. 4am or 6:30pm.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.NextWorkingDay(System.DateTime,System.Boolean)">
            <summary>
            Gets the next working day.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetDaysInBetween(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Gets the days between this day and the specified other day.
            It will remove TIME information. 
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.PreviousWorkingDay(System.DateTime,System.Boolean)">
            <summary>
            Gets the previous working day.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Determines whether this date is between two sepcified dates (inclusive).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.CalculateTotalWorkingHours(System.DateTime,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Calculates the total working times in the specified duration which are between the two specified day-hours.
            This can be used to calculate working hours in a particular duration.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetBeginningOfQuarter(System.DateTime)">
            <summary>
            Returns the Date of the beginning of Quarter for this DateTime value (time will be 00:00:00).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetEndOfQuarter(System.DateTime)">
            <summary>
            Returns the Date of the end of Quarter for this DateTime value (time will be 11:59:59).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetEndOfMonth(System.DateTime)">
            <summary>
            Returns the Date of the end of Quarter for this DateTime value (time will be 11:59:59).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetLast(System.DateTime,System.CalendarMonth,System.Int32)">
            <summary>
            Gets the last date with the specified month and day.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetNext(System.DateTime,System.CalendarMonth,System.Int32)">
            <summary>
            Gets the last date with the specified month and day.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetEndOfYear(System.DateTime)">
            <summary>
            Returns the Date of the end of Quarter for this DateTime value (time will be 11:59:59).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Min(System.DateTime,System.DateTime)">
            <summary>
            Gets the minimum value between this date and a specified other date.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Max(System.DateTime,System.DateTime)">
            <summary>
            Gets the maximum value between this date and a specified other date.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of weeks and returns the result.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetLast(System.DateTime,System.DayOfWeek,System.TimeSpan)">
            <summary>
            Gets the latest date with the specified day of week and time that is before (or same as) this date.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToLocal(System.Nullable{System.DateTime})">
            <summary>
            Returns the local time equivalent of this UTC date value based on the TimeZone specified in Localtime.TimeZoneProvider.
            Use this instead of ToLocalTime() so you get control over the TimeZone.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToLocal(System.DateTime)">
            <summary>
            Returns the local time equivalent of this UTC date value based on the TimeZone specified in Localtime.CurrentTimeZone().
            Use this instead of ToLocalTime() so you get control over the TimeZone.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToUniversal(System.Nullable{System.DateTime})">
            <summary>
            Returns the equivalent Universal Time (UTC) of this local date value.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToUniversal(System.DateTime)">
            <summary>
            Returns the equivalent Universal Time (UTC) of this local date value.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToUniversal(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Returns the equivalent Universal Time (UTC) of this local date value.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.RoundToSecond(System.DateTime)">
            <summary>
             Rounds this up to the nearest whole second.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.RoundToMinute(System.DateTime)">
            <summary>
             Rounds this up to the nearest whole minute.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.RoundToHour(System.DateTime)">
            <summary>
             Rounds this up to the nearest whole hour.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Round(System.DateTime,System.TimeSpan)">
            <summary>
             Rounds this up to the nearest interval (e.g. second, minute, hour, etc).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.CopyTo(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Copies the entire content of a directory to a specified destination.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.HasExeContent(System.IO.FileInfo)">
            <summary>
            Determines whether the file's contents start with MZ which is the signature for EXE files.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.CopyTo(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Copies the entire content of a directory to a specified destination.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.CopyTo(System.IO.FileInfo,System.IO.DirectoryInfo)">
            <summary>
            Copies this file to a specified destination directiry with the original file name.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetFile(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets a file info with the specified name under this folder. That file does not have to exist already.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetSubDirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets a subdirectory with the specified name. It does not have to exist already.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetOrCreateSubDirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets or creates a subdirectory with the specified name.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetDirectories(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Gets the subdirectory tree of this directory.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.EnsureExists(System.IO.DirectoryInfo)">
            <summary>
            Creates the directory if it doesn't already exist.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsEmpty(System.IO.DirectoryInfo)">
            <summary>
            Determines whether this folder is empty of any files or sub-directories.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Round(System.Double,System.Int32)">
            <summary>
            Rounds this value.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Round(System.Decimal,System.Int32)">
            <summary>
            Rounds this value.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Truncate(System.Double,System.Int32)">
            <summary>
            In mathematics and computer science, truncation is the term for limiting the number of digits right of the decimal point, by discarding the least significant ones.
            Note that in some cases, truncating would yield the same result as rounding, but truncation does not round up or round down the digits; it merely cuts off at the specified digit.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToShortMoneyString(System.Double)">
            <summary>
            Drops the floating point digits from the end of the money string.
            For example for 1500.00 it will yield "£1,500" and for 18.56 it will yield "£18.56".
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToInformalMoneyString(System.Double)">
            <summary>
            Drops the floating point digits from the end of the money string.
            For example for 1500.00 it will yield "£1,500" and for 18.56 it will yield "£18.56".
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToRadians(System.Double)">
            <summary>
            Converts degree into radians.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToRadians(System.Single)">
            <summary>
            Converts degree into radians.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AsPercentageOf(System.Double,System.Double,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Return this value as a percentages the of the given total.
            </summary>       
        </member>
        <member name="M:System.ZebbleExtensions.AsPercentageOf(System.Decimal,System.Decimal,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Return this value as a percentages the of the given total.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.RoundUpToNearest(System.Double,System.Double)">
            <summary>
            Rounds up to nearest value.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.RoundUpToNearest(System.Decimal,System.Decimal)">
            <summary>
            Rounds up to nearest value.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.RoundDownToNearest(System.Double,System.Double)">
            <summary>
            Rounds down to nearest value with the intervals specified.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.RoundDownToNearest(System.Decimal,System.Decimal)">
            <summary>
            Rounds down to nearest value with the intervals specified.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AlmostEquals(System.Double,System.Double,System.Double)">
            <summary>
            Determines if this double value is almost equal to the specified other value.
            This should be used instead of == or != operators due to the nature of double processing in .NET.
            </summary>
            <param name="tolerance">Specifies the tolerated level of difference.</param>
        </member>
        <member name="M:System.ZebbleExtensions.Or(System.Double,System.Double)">
            <summary>
            If this value is NaN, it will return the default value. Otherwise itself will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Or(System.Single,System.Single)">
            <summary>
            If this value is NaN, it will return the default value. Otherwise itself will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AlmostEquals(System.Single,System.Single,System.Single)">
            <summary>
            Determines if this float value is almost equal to the specified other value.
            This should be used instead of == or != operators due to the nature of float processing in .NET.
            </summary>
            <param name="tolerance">Specifies the tolerated level of difference.</param>
        </member>
        <member name="M:System.ZebbleExtensions.GetEmbeddedResourceName(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Gets the embedded resource name for a specified relative file path in the project.
            If the resulting resource name does not exist in this assembly it will throw.
            </summary>
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:System.ZebbleExtensions.ReadEmbeddedResource(System.Reflection.Assembly,System.String,System.String)">
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:System.ZebbleExtensions.ReadEmbeddedTextFile(System.Reflection.Assembly,System.String,System.String)">
            <param name="rootNamespace">The default namespace of your Visual Studio project.</param>
            <param name="fileRelativePath">For example MyRootFolder\MySubFolder\MyFile.cs (this is case sensitive).</param>
        </member>
        <member name="M:System.ZebbleExtensions.ToFullMessage(System.Exception,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a more complete text dump of this exception, than just its text.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToLogString(System.Exception,System.String)">
            <summary>
            <para>Creates a log-string from the Exception.</para>
            <para>The result includes the stacktrace, innerexception et cetera, separated by <seealso cref = "P:System.Environment.NewLine"/>.</para>
            </summary>
            <param name = "ex">The exception to create the string from.</param>
            <param name = "additionalMessage">Additional message to place at the top of the string, maybe be empty or null.</param>
            <returns></returns>
        </member>
        <member name="M:System.ZebbleExtensions.AddData(System.Exception,System.String,System.Object)">
            <summary>
            Adds a piece of data to this exception.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ReadAllBytes(System.IO.FileInfo)">
            <summary>
            Gets the entire content of this file.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ReadAllText(System.IO.FileInfo)">
            <summary>
            Gets the entire content of this file.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ReadAllText(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            Gets the entire content of this file.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.WriteAllBytes(System.IO.FileInfo,System.Byte[])">
            <summary>
            Saves the specified content on this file.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.WriteAllText(System.IO.FileInfo,System.String)">
            <summary>
            Saves the specified content on this file.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.WriteAllText(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Saves the specified content on this file.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AppendAllText(System.IO.FileInfo,System.String)">
            <summary>
            Saves the specified content to the end of this file.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AppendLine(System.IO.FileInfo,System.String)">
            <summary>
            Saves the specified content to the end of this file.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AppendAllText(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
            Saves the specified content to the end of this file.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.CopyTo(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Copies this file onto the specified desination path.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Exists(System.IO.DirectoryInfo)">
            <summary>
            Determines whether or not this directory exists.
            Note: The standard Exists property has a caching bug, so use this for accurate result.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Exists(System.IO.FileInfo)">
            <summary>
            Determines whether or not this file exists. 
            Note: The standard Exists property has a caching bug, so use this for accurate result.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GZip(System.Byte[])">
            <summary>
            Compresses this data into Gzip.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GZip(System.String)">
            <summary>
            Compresses this string into Gzip. By default it will use UTF8 encoding.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GZip(System.String,System.Text.Encoding)">
            <summary>
            Compresses this string into Gzip.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetSize(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Gets the total size of all files in this directory.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetSizeText(System.IO.DirectoryInfo,System.Boolean,System.Int32)">
            <summary>
            Gets the size of this folder in human readable text.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetSizeText(System.IO.FileInfo,System.Int32)">
            <summary>
            Gets the size of this file in human readable text.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToSafeFileName(System.String,System.Char)">
            <summary>
            Detects the characters which are not acceptable in File System and replaces them with a hyphen.
            </summary>
            <param name="replacement">The character with which to replace invalid characters in the name.</param>
        </member>
        <member name="M:System.ZebbleExtensions.GetMimeType(System.IO.FileInfo)">
            <summary>
            Gets the mime type based on the file extension.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetFilesOrEmpty(System.IO.DirectoryInfo,System.String)">
            <summary>
            Gets the files in this folder. If this folder is null or non-existent it will return an empty array.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetFullPath(Zebble.Services.IHierarchy)">
            <summary>
            Gets the full path of this hirarchical entity, seperated by " ➔ ".
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsRootNode(Zebble.Services.IHierarchy)">
            <summary>
            Gets whether this node is a root hierarchy node.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetFullPath(Zebble.Services.IHierarchy,System.String)">
            <summary>
            Gets the full path of this hirarchical entity, seperated by a specified seperation string.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.WithAllDescendants(Zebble.Services.IHierarchy)">
            <summary>
            Gets this node as well as all its children hierarchy.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetAllDescendants(Zebble.Services.IHierarchy)">
            <summary>
            Gets all children hierarchy of this node.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetAllParents(Zebble.Services.IHierarchy)">
            <summary>
            Gets all parents hierarchy of this node.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.WithAllParents``1(``0)">
            <summary>
            Gets this node as well as all its parents hierarchy.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetAllParents``1(Zebble.Services.IHierarchy)">
            <summary>
            Gets all parents hierarchy of this node.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.RoundUpToNearest(System.Int32,System.Int32)">
            <summary>
            Rounds up to nearest value with the intervals specified.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.RoundDownToNearest(System.Int32,System.Int32)">
            <summary>
            Rounds down to nearest value with the intervals specified.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToBase32(System.Int32)">
            <summary>
            Converts this number to a short textual representation.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToWordString(System.Int32)">
            <summary>
            To the word string.
            </summary>
            <remarks>
            Some awesome code from http://stackoverflow.com/questions/2729752/converting-numbers-in-to-words-c-sharp
            </remarks>
            <param name="number">The number.</param>
        </member>
        <member name="M:System.ZebbleExtensions.ToFileSizeString(System.Int64,System.String,System.Int32)">
            <summary>
            Emits a user readable file size (including units).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToFileSizeString(System.Int32,System.Int32)">
            <summary>
            Gets the size text for the given number of bytes. E.g. 4.5MB or 11KB.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToFileSizeString(System.Int64,System.Int32)">
            <summary>
            Gets the size text for the given number of bytes.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToFileSizeString(System.Int32,System.String,System.Int32)">
            <summary>
            Emits a user readable file size (including units).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AsPercentageOf(System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Return this value as a percentages the of the given total.
            </summary>
            <param name="multiplyBy100">Multiply this by 100.</param>
            <param name="roundTo">Rounding decimals to.</param>
        </member>
        <member name="F:System.ZebbleExtensions.NumberWordsUnits">
            <summary> Static mapping array, used by ToWordString for Units. </summary>
        </member>
        <member name="F:System.ZebbleExtensions.NumberWordsTens">
            <summary> Static mapping array, used by ToWordString for Tens. </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToOrdinal(System.Int32)">
            <summary>
            E.g. converts 1 to 1st. Or converts 13 to 13th.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToGuid(System.Int32)">
            <summary>
            Concerts this integer value to GUID.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Gets the index of the first item in this list which matches the specified criteria.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Add``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Adds all items from a specified dictionary to this dictionary.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Gets all items of this list except those meeting a specified criteria.
            </summary>
            <param name="criteria">Exclusion criteria</param>
        </member>
        <member name="M:System.ZebbleExtensions.ExceptNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.TimeSpan}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Boolean}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.DateTime}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ExceptNull(System.Collections.Generic.IEnumerable{System.Nullable{System.Guid}})">
            <summary>
            Gets all Non-NULL items of this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified list to the beginning of this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Adds the specified item(s) to the beginning of this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action for all items within the list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs an action for all items within the list.
            It will provide the index of the item in the list to the action handler as well.
            </summary>        
        </member>
        <member name="M:System.ZebbleExtensions.Cast(System.Collections.IEnumerable,System.Type)">
            <summary>
            Creates a list of the specified runtime type including all items of this collection.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.MinOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the minimum value of a specified expression in this list. If the list is empty, then the default value of the expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the maximum value of a specified expression in this list. If the list is empty, then the default value of the expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.MaxOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
            Gets the maximum value of the specified expression in this list. 
            If no items exist in the list then null will be returned. 
            </summary>     
        </member>
        <member name="M:System.ZebbleExtensions.MaxOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the maximum value of the specified expression in this list. 
            If no items exist in the list then null will be returned. 
            </summary>     
        </member>
        <member name="M:System.ZebbleExtensions.MinOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>
            Gets the minimum value of the specified expression in this list. 
            If no items exist in the list then null will be returned. 
            </summary>     
        </member>
        <member name="M:System.ZebbleExtensions.MinOrNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the minimum value of the specified expression in this list. 
            If no items exist in the list then null will be returned. 
            </summary>     
        </member>
        <member name="M:System.ZebbleExtensions.IsEquivalentTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether this list is equivalent to another specified list. Items in the list should be distinct for accurate result.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Counts the number of items in this list matching the specified criteria.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.PickRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Picks an item from the list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Lacks``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Works as opposite of Contains().
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.LacksAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this list lacks any item in the specified list.
            </summary>        
        </member>
        <member name="M:System.ZebbleExtensions.LacksAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this list lacks all items in the specified list.
            </summary>        
        </member>
        <member name="M:System.ZebbleExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Returns a subset of the items in a given collection in a range including the items at lower and upper bounds.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines of this list contains all items of another given list.
            </summary>        
        </member>
        <member name="M:System.ZebbleExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Determines if this list contains any of the specified items.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines if none of the items in this list meet a given criteria.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.None``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this is null or an empty list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Intersects``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this list intersects with another specified list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Intersects``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Determines if this list intersects with another specified list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.WithMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Selects the item with maximum of the specified value.
            If this list is empty, NULL (or default of T) will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.WithMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Selects the item with minimum of the specified value.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetElementAfter``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the element after a specified item in this list.
            If the specified element does not exist in this list, an ArgumentException will be thrown.
            If the specified element is the last in the list, NULL will be returned.
            </summary>        
        </member>
        <member name="M:System.ZebbleExtensions.GetElementsBefore``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the element before a specified item in this list.
            If the specified element does not exist in this list, the whole list will be returned.
            If the specified element is the first in the list, an empty list will be returned.
            </summary>        
        </member>
        <member name="M:System.ZebbleExtensions.GetElementBefore``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets the element before a specified item in this list.
            If the specified element does not exist in this list, an ArgumentException will be thrown.
            If the specified element is the first in the list, NULL will be returned.
            </summary>        
        </member>
        <member name="M:System.ZebbleExtensions.Remove``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes a list of items from this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AreItemsUnique``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if all items in this collection are unique.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Returns the union of this list with the specified other lists.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Returns the union of this list with the specified items.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AverageOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Gets the average of the specified expression on all items of this list.
            If the list is empty, null will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Trim(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Trims all elements in this list and excludes all null and "empty string" elements from the list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Contains(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Determines whether this list of strings contains the specified string.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Lacks(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Determines whether this list of strings contains the specified string.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToLinesString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concats all elements in this list with Environment.NewLine.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.TryGet``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value with the specified key, or null.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Chop``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Chops a list into same-size smaller lists. For example:
            new int[] { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 }.Chop(5)
            will return: { {1,2,3,4,5}, {6,7,8,9,10}, {11,12,13,14,15}, {16} }
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetKeys``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Gets the keys of this dictionary.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.TimeSpan})">
            <summary>
            Returns the sum of a timespan selector on this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AllIndicesOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the indices of all items which matche a specified criteria.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Replace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Replaces the specified item in this list with the specified new item.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetAllValues``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Gets all values from this dictionary.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetAllValues``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Gets all values from this dictionary.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ExceptAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Returns all elements of this list except those at the specified indices.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ExceptLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns all elements of this list except the last X items.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ExceptFirst``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns all elements of this list except the first X items.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.RemoveNulls``1(System.Collections.Generic.IList{``0})">
            <summary>
            Removes the nulls from this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.TryRemove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Tries to the remove an item with the specified key from this dictionary.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ContainsAtLeast(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Determines whether this least contains at least the specified number of items.
            This can be faster than calling "x.Count() >= N" for complex iterators.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToNameValueCollection``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts this to a KeyValueCollection.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AddFromProperties``1(System.Collections.Generic.Dictionary{System.String,``0},System.Object)">
            <summary>
            Adds the properties of a specified [anonymous] object as items to this dictionary.
            It ignores duplicate entries and null values.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Add``2(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``1)">
            <summary>
            Adds the specified key/value pair to this list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified items to this set.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.DequeueAll``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Dequeues all queued items in the right order.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a HashSet of type T (use for performance in place of ToList()).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AllIndicesOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Gets all indices of the specified item in this collection.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.OrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an empty collection if this collection is null.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{``0})">
            <summary>
            Determines if the specified item exists in this list. 
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Lacks``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{``0})">
            <summary>
            Determines if the specified item exists in this list. 
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsAnyOf``1(System.Nullable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if this item is in the specified list.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ContainsAny(System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{System.Guid}[])">
            <summary>
            Specifies whether this list contains any of the specified values.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Median(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Finds the median of a list of integers
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Or``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            If this list is null or empty, then the specified alternative will be returned, otherwise this will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Perform``1(``0,System.Action{``0})">
            <summary>
            Performs a specified action on this item if it is not null. If it is null, it simply ignores the action.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get``2(``0,System.Func{``0,``1})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get``2(``0,System.Func{``0,System.Nullable{``1}})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get``1(System.Nullable{System.TimeSpan},System.Func{System.TimeSpan,``0})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get``1(``0,System.Func{``0,System.Guid})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get``1(``0,System.Func{``0,System.Int32})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get``1(``0,System.Func{``0,System.Double})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get``1(``0,System.Func{``0,System.Decimal})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get(System.Nullable{System.DateTime},System.Func{System.Nullable{System.DateTime},System.String})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get``1(``0,System.Func{``0,System.Byte})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get``1(``0,System.Func{``0,System.DateTime})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get``1(``0,System.Func{``0,System.Nullable{System.DateTime}})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Get``1(System.Nullable{System.DateTime},System.Func{System.Nullable{System.DateTime},``0})">
            <summary>
            Gets a specified member of this object. If this is null, null will be returned. Otherwise the specified expression will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.NextBoolean(System.Random,System.Double)">
            <summary>
            Gets a random boolean value with the specified chance (0-100).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.NextBoolean(System.Random)">
            <summary>
            Gets a random boolean value.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.NextAlphaNumericString(System.Random,System.Int32,System.Boolean)">
            <summary>
            Generates and returns a Random alphanumeric string.
            </summary>
            <param name="rng">Random instance.</param>
            <param name="length">Length of string to return</param>
            <param name="omitConfusableCharacters">Pass true to miss-out letters that can be confused with numbers (BDIOS)</param>
            <returns>String instance containing random alphanumeric characters.</returns>
        </member>
        <member name="M:System.ZebbleExtensions.PickNumbers(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns [quantity] number of unique random integers within the given range.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToString(System.Range{System.DateTime},System.String)">
            <summary>
            Returns a formatted string based on this Range&lt;DateTime&gt; object and the given string format.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetIntervals(System.Range{System.Double},System.Double)">
            <summary>
            Gets all possible items in the range based on the specified intervals.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetIntervals(System.Range{System.Decimal},System.Decimal)">
            <summary>
            Gets all possible items in the range based on the specified intervals.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetIntervals(System.Range{System.Int32},System.Int32)">
            <summary>
            Gets all possible items in the range based on the specified intervals.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.MergeAdjacents(System.Collections.Generic.IEnumerable{System.Range{System.DateTime}},System.TimeSpan)">
            <summary>
            Merges adjecant items in this list if their gap is within the specified tolerance.
            The result will be another list of ranges with potentially fewer (but larger) ranges.
            Consider sorting the items before calling this method.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetParentTypes(System.Type)">
            <summary>
            Gets all parent types hierarchy for this type.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.InhritsFrom(System.Type,System.Type)">
            <summary>
            Determines whether this type inherits from a specified base type, either directly or indirectly.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetCSharpName(System.Type,System.Boolean)">
            <summary>
            Retuns the name of this type in the same way that is used in C# programming.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the value of this property on the specified object.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.SetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Set the value of this property on the specified object.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Add``2(System.Collections.Generic.IDictionary{System.Type,System.Type})">
            <summary>
            Adds the specified types pair to this type dictionary.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates the instance of this type.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Defines``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether it has a specified attribute applied to it.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            Creates the instance of this type casted to the specified type.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsNullable(System.Type)">
            <summary>
            Determines if this type is a nullable of something.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.Is``1(System.Reflection.PropertyInfo,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether this property info is the specified property (in lambda expression).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsStatic(System.Type)">
            <summary>
            Determines whether this type is static.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetSubTypes(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets all types in this assembly that are directly inherited from a specified base type.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetProgrammingName(System.Type)">
            <summary>
            Gets the full programming name of this type. Unlike the standard FullName property, it handles Generic types properly.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetProgrammingName(System.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the full programming name of this type. Unlike the standard FullName property, it handles Generic types properly.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsGenericOf(System.Type,System.Type,System.Type[])">
            <summary>
            Determines if this type is a generic class  of the specified type.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property name for a specified expression.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the property name for a specified expression.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for this type. It's equivalent to default(T).
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.IsStatic(System.Reflection.PropertyInfo)">
            <summary>
            Determine whether this property is static.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.DropContext(System.Threading.Tasks.Task)">
            <summary>A shortcut to ConfigureAwait(continueOnCapturedContext: false)</summary>
        </member>
        <member name="M:System.ZebbleExtensions.DropContext``1(System.Threading.Tasks.Task{``0})">
            <summary>A shortcut to ConfigureAwait(continueOnCapturedContext: false)</summary>
        </member>
        <member name="M:System.ZebbleExtensions.Is``1(System.String)">
            <summary>
            Determines whether this string can be converted to the specified type.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.TryParseAs``1(System.String)">
            <summary>
            Tries to parse this text to the specified type.
            Returns null if parsing is not possible.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.To``1(System.String)">
            <summary>
            It converts this text to the specified data type. 
            It supports all primitive types, Enums, Guid, XElement, XDocument, Color, ...
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.To(System.String,System.Type)">
            <summary>
            Converts the value of this string object into the specified target type.
            It supports all primitive types, Enums, Guid, XElement, XDocument, Color, ...
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.WrapIn(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Wraps the content of this string builder with the provided text blocks.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.WrapInLines(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Wraps the content of this string builder with the provided lines of text.
            A line-break will be added to the left element, and another line break will be added before the right element.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ApproxTotalYears(System.TimeSpan)">
            <summary>
            Gets the approximate number of the total years equivalent to this timespan.
            This is not accurate due to unknown leap years in the actual period to which this TimeSpan relates.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToDate(System.TimeSpan)">
            <summary>
            Converts this time to the date time on date of 1900-01-01.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToDate(System.Nullable{System.TimeSpan})">
            <summary>
            Converts this time to the date time on date of 1900-01-01.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToNaturalTime(System.TimeSpan)">
            <summary>
            Gets the natural text for this timespan. For example "2 days, 4 hours and 3 minutes".
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.ToNaturalTime(System.TimeSpan,System.Int32,System.Boolean)">
            <summary>
            Gets the natural text for this timespan. For example "2 days, 4 hours and 3 minutes".
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetElement(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Gets an Element with the specified path. For example "Tree/Branch1/Branch2".
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetNode(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Gets a node with the specified path. For example "Tree/Branch1/Branch2".
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.GetValue``1(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Gets the value of an attribute or inner text of an element with the specified path. For example "Tree/Branch1/Branch2".
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.AddTo``1(``0,System.Xml.Linq.XContainer)">
            <summary>
            Adds this node to a specified container and returns it back to be used as fluent API.
            </summary>
        </member>
        <member name="M:System.ZebbleExtensions.RemoveNamespaces(System.Xml.Linq.XElement)">
            <summary>
            Removes all namespaces from this document.
            </summary>
        </member>
        <member name="M:System.Base32Integer.#ctor(System.Int32)">
            <summary>
            Creates a new Base32Integer instance.
            </summary>
        </member>
        <member name="M:System.Base32Integer.#ctor(System.String)">
            <summary>
            Creates a new Base32Integer instance.
            </summary>
        </member>
        <member name="M:System.Base32Integer.ToBase32String(System.Int32)">
            <summary>
            Converts an array of bytes to a Base32-k string.
            </summary>
        </member>
        <member name="M:System.Base32Integer.FromBase32String(System.String)">
            <summary>
            Converts a Base32-k string into an array of bytes.
            </summary>        
        </member>
        <member name="M:System.CachedValue.Create``1(System.Func{``0})">
            <summary>
            Creates a CachedValue the specified value builder.
            </summary>
        </member>
        <member name="M:System.CachedValue`1.#ctor(`0)">
            <summary>
            Creates a new CachedValue instance.
            </summary>
        </member>
        <member name="M:System.CachedValue`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new CachedValue instance with lazy loading support.
            </summary>
            <param name="valueBuilder">The value builder.</param>
        </member>
        <member name="F:System.CachedValue`1._Value">
            <summary>
            Stores the underlying value.
            </summary>
        </member>
        <member name="P:System.CachedValue`1.Value">
            <summary>
            Gets the underlying value.
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentList`1.AddUnique(`0)">
            <summary>
            Adds an object only if it doesn't already exist in the list.
            </summary> 
        </member>
        <member name="P:System.EventArgs`1.Data">
            <summary>
            Gets or sets the Data property of this EventArgs.
            </summary>
        </member>
        <member name="M:System.EventArgs`1.#ctor(`0)">
            <summary>
            Creates a new EventArgs instance.
            </summary>
        </member>
        <member name="M:System.EventArgs`1.#ctor">
            <summary>
            Creates a new EventArgs instance.
            </summary>
        </member>
        <member name="P:System.EventArgs`2.Data1">
            <summary>
            Gets or sets the Data property of this EventArgs.
            </summary>
        </member>
        <member name="P:System.EventArgs`2.Data2">
            <summary>
            Gets or sets the Data property of this EventArgs.
            </summary>
        </member>
        <member name="M:System.EventArgs`2.#ctor(`0,`1)">
            <summary>
            Creates a new EventArgs instance.
            </summary>
        </member>
        <member name="M:System.EventArgs`2.#ctor(`0)">
            <summary>
            Creates a new EventArgs instance.
            </summary>
        </member>
        <member name="M:System.EventArgs`2.#ctor">
            <summary>
            Creates a new EventArgs instance.
            </summary>
        </member>
        <member name="F:System.LocalTime.CurrentTimeZone">
            <summary>
            By default provides the current server's timezone.
            You can override this to provide user-specific time-zones or based on any other system setting.
            </summary>
        </member>
        <member name="F:System.LocalTime.GlobalNowGetter">
            <summary>
            If set, it will provide the "Now" value.
            Note: This has lower priority than thread-level overrides.
            </summary>
        </member>
        <member name="P:System.LocalTime.Now">
            <summary>        
            <para>Gets the local current date/time of the application.</para>
            <para>By default it equals to System.DateTime.Now.</para>
            <para>To override its value, you should wrap the calling code inside "using (LocalTime.SetNow(some date)) { ... }"</para>
            <para>&#160;</para>
            <para> Examples:</para>
            <para>---------------------------------</para>
            <para>var now = LocalTime.Now // which is identical to DateTime.Now</para>
            <para>---------------------------------</para>
            <para>using (LocalTime.Set(DateTime.Parse("15/01/2000 06:13")))</para>
            <para>{</para>
            <para>var date = LocalTime.Now; // that sets date to 15th Jan 200 at 6:13.</para>
            <para>}</para>
            </summary>
        </member>
        <member name="P:System.LocalTime.UtcNow">
            <summary>
            Gets the current Universal Time.
            </summary>
        </member>
        <member name="P:System.LocalTime.Today">
            <summary>
            <para>Gets the local current date of the application (no time).</para>
            <para>By default it equals to System.DateTime.Today.</para>
            <para>To override its value, you should wrap the calling code inside "using (LocalTime.SetNow(some date)) { ... }"</para>
            <para>&#160;</para>
            <para> Examples:</para>
            <para>---------------------------------</para>
            <para>var now = LocalTime.Today // which is identical to DateTime.Today</para>
            <para>---------------------------------</para>
            <para>using (LocalTime.Set(DateTime.Parse("15/01/2000 06:13")))</para>
            <para>{</para>
            <para>var date = LocalTime.Today; // that sets date to 15th Jan 200.</para>
            <para>}</para>
            </summary>
        </member>
        <member name="P:System.LocalTime.UtcToday">
            <summary>
            Gets the current Universal Time's date part (without time).
            </summary>
        </member>
        <member name="M:System.LocalTime.RedefineNow(System.Func{System.DateTime})">
            <summary>
            Sets the current time function of the application.
            Note: This has lower priority than thread-level time setting.
            </summary>
        </member>
        <member name="M:System.OverriddenApplicationDate.#ctor(System.Func{System.DateTime})">
            <summary>
            Creates a new OverriddenApplicationDate instance.
            </summary>
        </member>
        <member name="T:System.Range`1">
            <summary>
            Provides a range of values.
            </summary>
        </member>
        <member name="M:System.Range`1.#ctor">
            <summary>
            Creates a new Range instance.
            </summary>
        </member>
        <member name="M:System.Range`1.#ctor(`0,`0)">
            <summary>
            Creates a new Range instance with the specified boundaries.
            </summary>
        </member>
        <member name="P:System.Range`1.From">
            <summary>
            Gets or sets the From of this Range.
            </summary>
        </member>
        <member name="P:System.Range`1.To">
            <summary>
            Gets or sets the To of this Range.
            </summary>
        </member>
        <member name="M:System.Range`1.GetLength">
            <summary>
            Gets the length of this range. For a date range, use the TimeOfDay property of the returned date time.
            </summary>
        </member>
        <member name="M:System.Range`1.Lacks(`0,System.Boolean)">
            <summary>
            Determines whether or not this range lacks the given value.
            </summary>
        </member>
        <member name="M:System.Range`1.Contains(`0,System.Boolean)">
            <summary>
            Determines whether or not this range cotnains the given value
            </summary>
        </member>
        <member name="M:System.Range`1.Contains(System.Range{`0})">
            <summary>
            Determines whether or not this range contains with the given range
            </summary>
        </member>
        <member name="M:System.Range`1.Intersects(System.Range{`0},System.Boolean)">
            <summary>
            Determines whether or not this range intersects with the given range
            </summary>
        </member>
        <member name="M:System.Range`1.ToString">
            <summary>
            Returns: {From} - {To}.
            </summary>
        </member>
        <member name="M:System.Range`1.ToString(System.String)">
            <summary>
            Returns {From}{rangeSeparator}{To}.
            </summary>
        </member>
        <member name="M:System.Range`1.ToString(System.String,System.String)">
            <summary>
            Returns the From and To values formatted by the specified format and then joined together with the specified rangeSeparator.
            </summary>
            <param name="perItemFormat">E.g. {0:dd MM yy}</param>
        </member>
        <member name="F:System.ZebbleStringExtensions.JsUnsafeCharacters">
            <summary>
            Array of unsafe characters that need to be replaced with their 
            character code literals in a JavaScript string.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.TrimStart(System.String,System.String)">
            <summary>
            Removes the specified text from the start of this string instance.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.TrimEnd(System.String,System.Int32)">
            <summary>
            Trims the end of this instance of string with the specified number of characters.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.TrimOrNull(System.String)">
            <summary>
            If this string object is null, it will return null. Otherwise it will trim the text and return it.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.TrimOrEmpty(System.String)">
            <summary>
            If this string object is null, it will return empty string. Otherwise it will trim the text and return it.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToLowerOrEmpty(System.String)">
            <summary>
            Returns a copy of this text converted to lower case. If it is null it will return empty string.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToUpperOrEmpty(System.String)">
            <summary>
            Returns a copy of this text converted to upper case. If it is null it will return empty string.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.LacksValue(System.String)">
            <summary>
            Determines whether this instance of string is null or empty.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.HasValue(System.String)">
            <summary>
            Determines whether this instance of string is not null or empty.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.Or(System.String,System.String)">
            <summary>
            Gets the same string if it is not null or empty. Otherwise it returns the specified default value.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.Unless(System.String,System.String)">
            <summary>
            Gets the same string unless it is the same as the specified text. If they are the same, empty string will be returned.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.Summarize(System.String,System.Int32,System.Boolean)">
            <summary>
            Summarizes the specified source.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.Summarize(System.String,System.Int32)">
            <summary>
            Summarizes the specified text.
            </summary>        
        </member>
        <member name="M:System.ZebbleStringExtensions.TrimEnd(System.String,System.String)">
            <summary>
            Trims some unnecessary text from the end of this string, if it exists.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.TrimEnd(System.String,System.String,System.Boolean)">
            <summary>
            Trims some unnecessary text from the end of this string, if it exists.
            </summary>
            <param name="caseSensitive">By default it's TRUE.</param>
        </member>
        <member name="M:System.ZebbleStringExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns the last few characters of the string with a length
            specified by the given parameter. If the string's length is less than the 
            given length the complete string is returned. If length is zero or 
            less an empty string is returned
            </summary>
            <param name="length">Number of characters to return</param>
        </member>
        <member name="M:System.ZebbleStringExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns the first few characters of the string with a length
            specified by the given parameter. If the string's length is less than the 
            given length the complete string is returned. If length is zero or 
            less an empty string is returned
            </summary>
            <param name="length">Number of characters to return</param>
        </member>
        <member name="M:System.ZebbleStringExtensions.EndsWithAny(System.String,System.String[])">
            <summary>
            Gets whether this string item ends with any of the specified items.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.AllIndicesOf(System.String,System.String)">
            <summary>
            Gets all indices of a specified string inside this text.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.WithPrefix(System.String,System.String)">
            <summary>
            Returns this text with the specified prefix if this has a value. If this text is empty or null, it will return empty string.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.WithSuffix(System.String,System.String)">
            <summary>
            Returns this text with the specified suffix if this has a value. If this text is empty or null, it will return empty string.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.WithWrappers(System.String,System.String,System.String)">
            <summary>
            Wraps this text between the left and right wrappers, only if this has a value.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Repeats this text by the number of times specified.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.Repeat(System.String,System.Int32,System.String)">
            <summary>
            Repeats this text by the number of times specified, seperated with the specified seperator.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Determines if this string value contains a specified substring.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.Remove(System.String,System.String[])">
            <summary>
            Removes the specified substrings from this string object.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.KeepReplacing(System.String,System.String,System.String)">
            <summary>
            Replaces all occurances of a specified phrase to a substitude, even if the original phrase gets produced again as the result of substitution.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.OnlyWhen(System.String,System.Boolean)">
            <summary>
            Gets this same string when a specified condition is True, otherwise it returns empty string.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.Unless(System.String,System.Boolean)">
            <summary>
            Gets this same string when a specified condition is False, otherwise it returns empty string.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToLines(System.String)">
            <summary>
            Gets the lines of this string.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.IsUpper(System.Char)">
            <summary>
            Indicates whether this character is categorized as an uppercase letter.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.IsLower(System.Char)">
            <summary>
            Indicates whether this character is categorized as a lowercase letter.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.IsLetter(System.Char)">
            <summary>
            Indicates whether this character is categorized as a letter.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.IsDigit(System.Char)">
            <summary>
            Indicates whether this character is categorized as digit.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether this character is categorized as White Space (space, tab, new line, etc).
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.IsLetterOrDigit(System.Char)">
            <summary>
            Indicates whether this character is categorized as a letter or digit.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToUpper(System.Char)">
            <summary>
            Converts the value of this character to its uppercase equivalent.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToLower(System.Char)">
            <summary>
            Converts the value of this character to its lowercase equivalent.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToStringOrEmpty(System.Object)">
            <summary>
            If this expression is null, returns an empty string. Otherwise, it returns the ToString() of this instance.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.Lacks(System.String,System.String,System.Boolean)">
            <summary>
            Determines whether this string object does not contain the specified phrase.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.LacksAll(System.String,System.String[])">
            <summary>
            Determines whether this string object does not contain any of the specified phrases.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.LacksAll(System.String,System.Boolean,System.String[])">
            <summary>
            Determines whether this string object does not contain any of the specified phrases.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToLiteralFromPascalCase(System.String)">
            <summary>
            Returns natural English literal text for a specified pascal case string value.
            For example it coverts "ThisIsSomething" to "This is something".
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToLower(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the all-lower-case version of this list.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToUpper(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the all-upper-case version of this list.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.GetUtf8WithSignatureBytes(System.String)">
            <summary>
            Gets the UTF8-with-signature bytes of this text.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToBase64String(System.Byte[])">
            <summary>
            Converts this array of bytes to a Base64 string.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ContainsAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Determines whether this text contains any of the specified keywords.
            If the keywords list contains a null or empty string, it throws an exception. If you wish to ignore those, use .Trim() on your keywords list.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.Split(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Splits this list of string items by a specified separator into a number of smaller lists of string.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.AsUri(System.String)">
            <summary>
            Converts this path into a Uri object.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.CreateHash(System.String,System.Object)">
            <summary>
            Creates a hash of a specified clear text with a mix of MD5 and SHA1.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.CreateMD5Hash(System.String,System.Boolean)">
            <summary>
            Creates MD5 hash of this text
            <param name="asHex">Specifies whether a hex-compatible string is expected.</param>
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.CreateMD5Hash(System.String)">
            <summary>
            Creates MD5 hash of this text
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.CreateSHA1Hash(System.String)">
            <summary>
            Creates SHA1 hash of this text
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToJsonText(System.String)">
            <summary>
            Escapes all invalid characters of this string to it's usable as a valid json constant.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToIOSafeHash(System.String)">
            <summary>
            Getsa SHA1 hash of this text where all characters are alpha numeric.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.TryParseEnum``1(System.String,System.Nullable{``0})">
            <summary>
            Attempts to Parse this String as the given Enum type.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.OrEmpty(System.String)">
            <summary>
            If it's null, it return empty string. Otherwise it returns this.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.GetSingleMatchedValueOrDefault(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Returns the only matched string in the given text using this Regex pattern. 
            Returns null if more than one match found.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.HasMany``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if this collection has more than one item.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.JavascriptEncode(System.String)">
            <summary>
            Returns valid JavaScript string content with reserved characters replaced by encoded literals.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToPascalCaseId(System.String)">
            <summary>
            Returns valid PascalCase JavaScript or C# string content.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToCamelCaseId(System.String)">
            <summary>
            Returns valid camelCase javaScript or C# string content.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.CapitaliseFirstLetters(System.String)">
            <summary>
            Converts [hello world] to [Hello World].
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.TrimBefore(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Trims all text before the specified search phrase.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.OrNullIfEmpty(System.String)">
            <summary>
            Returns this string. But if it's String.Empty, it returns NULL.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ToProperCase(System.String)">
            <summary>
            Capitalises the first letter and lower-cases the rest.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ReplaceWholeWord(System.String,System.String,System.String,System.Boolean)">
            <summary>
            It will replace all occurances of a specified WHOLE WORD and skip occurances of the word with characters or digits attached to it.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.ContainsWholeWord(System.String,System.String,System.Boolean)">
            <summary>
            Returns if a specified WHOLE WORD is found in this text. It skips occurances of the word with characters or digits attached to it.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.HtmlEncode(System.String)">
            <summary>
            Gets the Html Encoded version of this text.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.HtmlDecode(System.String)">
            <summary>
            Gets the Html Decoded version of this text.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.UrlEncode(System.String)">
            <summary>
            Gets the Url Encoded version of this text.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.UrlDecode(System.String)">
            <summary>
            Gets the Url Decoded version of this text.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.EnsureStartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Ensure that this string object starts with a specified other one.
            If it does not, then it prepends that and return the combined text.
            </summary>
        </member>
        <member name="M:System.ZebbleStringExtensions.EnsureEndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Ensure that this string object ends with a specified other one.
            If it does not, then it appends that and return the combined text.
            </summary>
        </member>
        <member name="M:System.ZebbleSystemExtensions.RunInParallel(System.Threading.Tasks.Task,System.String,System.Int32,System.String)">
            <summary>
            Runs this task in parallel without waiting for it.
            In case of an exception, in development mode, 
            it will be either thrown on the UI thread to stop the application, or 
            </summary>
        </member>
    </members>
</doc>
